id,summary,details,modified,published,package_name,package_ecosystem,package_repo,git_introduced,git_fixed
GO-2020-0016,Infinite loop in github.com/ulikunitz/xz,"An attacker can construct a series of bytes such that calling Reader.Read on the bytes could cause an infinite loop. If parsing user supplied input, this may be used as a denial of service vector.",0001-01-01T00:00:00Z,2021-04-14T20:04:52Z,github.com/ulikunitz/xz,Go,,,
GO-2022-0435,Panic due to large inputs affecting P-256 curves in crypto/elliptic,"A crafted scalar input longer than 32 bytes can cause P256().ScalarMult or P256().ScalarBaseMult to panic. Indirect uses through crypto/ecdsa and crypto/tls are unaffected. amd64, arm64, ppc64le, and s390x are unaffected.",0001-01-01T00:00:00Z,2022-05-20T21:17:46Z,stdlib,Go,,,
GO-2022-1008,Unauthorized file access in github.com/containers/buildah,"SGID programs executed in a container can access files that have negative group permissions for the user's primary group.

Consider a file which is owned by user u1 and group g1, permits user and other read access, and does NOT permit group read access. This file is readable by u1 and all other users except for ones in group g1.

A program with the set-group-ID (SGID) bit set assumes the primary group of the program's group when it executes.

A user with the primary group g1 who executes an SGID program owned by group g2 should not be able to access the file described above. While the program executes with the primary group g2, the group g1 should remain in its supplementary groups, blocking access to the file.

Buildah does not correctly add g1 to the supplementary groups in this scenario, permitting unauthorized access.",0001-01-01T00:00:00Z,0001-01-01T00:00:00Z,github.com/containers/buildah,Go,,,
GO-2023-2116,CSRF token validation vulnerability in github.com/gofiber/fiber/v2,"A cross-site request forgery vulnerability can allow an attacker to obtain tokens and forge malicious requests on behalf of a user. This can lead to unauthorized actions being taken on the user's behalf, potentially compromising the security and integrity of the application.

The vulnerability is caused by improper validation and enforcement of CSRF tokens within the application. The CSRF token is validated against tokens in storage but was is not tied to the original requestor that generated it, allowing for token reuse.",0001-01-01T00:00:00Z,0001-01-01T00:00:00Z,github.com/gofiber/fiber/v2,Go,,,
GO-2022-0492,Path traversal in github.com/argoproj/argo-events,"GitArtifactReader is vulnerable to directory traversal attacks.

The GitArtifactReader.Read function reads and returns the contents of a Git repository file. A maliciously crafted repository can exploit this to cause Read to read from arbitrary files on the filesystem.",0001-01-01T00:00:00Z,2022-07-15T23:30:03Z,github.com/argoproj/argo-events,Go,,,
GO-2023-1737,Improper handling of filenames in Content-Disposition HTTP header in github.com/gin-gonic/gin,"The filename parameter of the Context.FileAttachment function is not properly sanitized. A maliciously crafted filename can cause the Content-Disposition header to be sent with an unexpected filename value or otherwise modify the Content-Disposition header. For example, a filename of ""setup.bat&quot;;x=.txt"" will be sent as a file named ""setup.bat"".

If the FileAttachment function is called with names provided by an untrusted source, this may permit an attacker to cause a file to be served with a name different than provided. Maliciously crafted attachment file name can modify the Content-Disposition header.",0001-01-01T00:00:00Z,0001-01-01T00:00:00Z,github.com/gin-gonic/gin,Go,,,
GO-2022-0521,Stack exhaustion from deeply nested XML documents in encoding/xml,Calling Decoder.Skip when parsing a deeply nested XML document can cause a panic due to stack exhaustion.,0001-01-01T00:00:00Z,2022-07-20T17:02:04Z,stdlib,Go,,,
GO-2022-1098,Denial of service in message decoding in github.com/btcsuite/btcd,"Erroneous message decoding can cause denial of service.

Improper checking of maximum witness size during node message decoding prevented nodes in Lightning Labs lnd (before 0.15.2-beta) to sync.",0001-01-01T00:00:00Z,0001-01-01T00:00:00Z,github.com/btcsuite/btcd,Go,,,
GO-2022-0253,Resource exhaustion via GZIP bomb in github.com/cloudflare/cfrpki,"The HTTPFetcher.GetXML function reads a response of unlimited size into memory, permitting resource exhaustion.",0001-01-01T00:00:00Z,2022-07-15T23:07:48Z,github.com/cloudflare/cfrpki,Go,,,
GO-2020-0019,Integer overflow in github.com/gorilla/websocket,"An attacker can craft malicious WebSocket frames that cause an integer overflow in a variable which tracks the number of bytes remaining. This may cause the server or client to get stuck attempting to read frames in a loop, which can be used as a denial of service vector.",0001-01-01T00:00:00Z,2021-04-14T20:04:52Z,github.com/gorilla/websocket,Go,,,
GO-2022-0621,Exposure of sensitive information in k8s.io/kube-state-metrics,"Exposing annotations as metrics can leak secrets.

An experimental feature of kube-state-metrics enables annotations to be exposed as metrics. By default, metrics only expose metadata about secrets. However, a combination of the default kubectl behavior and this new feature can cause the entire secret content to end up in metric labels.",0001-01-01T00:00:00Z,2021-05-18T15:38:54Z,k8s.io/kube-state-metrics,Go,,,
GO-2023-1990,Excessive CPU consumption when decoding 0-height images in golang.org/x/image/tiff,"A maliciously-crafted image can cause excessive CPU consumption in decoding.

A tiled image with a height of 0 and a very large width can cause excessive CPU consumption, despite the image size (width * height) appearing to be zero.",0001-01-01T00:00:00Z,0001-01-01T00:00:00Z,golang.org/x/image,Go,,,
GO-2023-1702,Infinite loop in parsing in go/scanner,Calling any of the Parse functions on Go source code which contains //line directives with very large line numbers can cause an infinite loop due to integer overflow.,0001-01-01T00:00:00Z,0001-01-01T00:00:00Z,stdlib,Go,,,
GO-2022-1031,Open redirect in github.com/labstack/echo/v4,Labstack Echo contains an open redirect vulnerability via the Static Handler component. This vulnerability can be leveraged by attackers to cause a Server-Side Request Forgery (SSRF).,0001-01-01T00:00:00Z,0001-01-01T00:00:00Z,github.com/labstack/echo/v4,Go,,,
GO-2023-1998,Improper path sanitization in sandbox mode in github.com/projectdiscovery/nuclei/v2,Improper path sanitization in sandbox mode in github.com/projectdiscovery/nuclei/v2,0001-01-01T00:00:00Z,0001-01-01T00:00:00Z,github.com/projectdiscovery/nuclei/v2,Go,,,
GO-2022-1002,Panic in github.com/pandatix/go-cvss,ParseVector can panic when provided with invalid input.,0001-01-01T00:00:00Z,0001-01-01T00:00:00Z,github.com/pandatix/go-cvss,Go,,,
GO-2021-0096,Memory corruption or code execution in github.com/proglottis/gpgme,"Due to improper setting of finalizers, memory passed to C may be freed before it is used, leading to crashes due to memory corruption or possible code execution.",0001-01-01T00:00:00Z,2021-04-14T20:04:52Z,github.com/proglottis/gpgme,Go,,,
GO-2022-1159,Path traversal in github.com/containers/podman/v4,"The local path and the lowest subdirectory may be disclosed due to incorrect absolute path traversal, resulting in an impact to confidentiality.",0001-01-01T00:00:00Z,0001-01-01T00:00:00Z,github.com/containers/podman/v4,Go,,,
GO-2023-1597,Cross site scripting in github.com/kitabisa/teler-waf,Improper sanitization and filtering of HTML entities in user input can lead to cross-site scripting (XSS) attacks where arbitrary JavaScript code is executed in the browser.,0001-01-01T00:00:00Z,0001-01-01T00:00:00Z,github.com/kitabisa/teler-waf,Go,,,
GO-2023-1505,Arbitrary file read vulnerability in github.com/uber/kraken,kraken contains an arbitrary file read vulnerability via component testfs.,0001-01-01T00:00:00Z,0001-01-01T00:00:00Z,github.com/uber/kraken,Go,,,
GO-2022-0534,Timing attack in github.com/runatlantis/atlantis,"Validation of Gitlab requests can leak secrets.

The package github.com/runatlantis/atlantis/server/controllers/events uses a non-constant time comparison for secrets while validating a Gitlab request. This allows for a timing attack where an attacker can recover a secret and then forge the request.",0001-01-01T00:00:00Z,2022-08-11T20:54:51Z,github.com/runatlantis/atlantis,Go,,,
GO-2022-1143,Restricted file access on Windows in os and net/http,"On Windows, restricted files can be accessed via os.DirFS and http.Dir.

The os.DirFS function and http.Dir type provide access to a tree of files rooted at a given directory. These functions permit access to Windows device files under that root. For example, os.DirFS(""C:/tmp"").Open(""COM1"") opens the COM1 device. Both os.DirFS and http.Dir only provide read-only filesystem access.

In addition, on Windows, an os.DirFS for the directory (the root of the current drive) can permit a maliciously crafted path to escape from the drive and access any path on the system.

With fix applied, the behavior of os.DirFS("""") has changed. Previously, an empty root was treated equivalently to ""/"", so os.DirFS("""").Open(""tmp"") would open the path ""/tmp"". This now returns an error.",0001-01-01T00:00:00Z,0001-01-01T00:00:00Z,stdlib,Go,,,
GO-2021-0079,Panic in github.com/bytom/bytom,"A malformed query can cause an out-of-bounds panic due to improper validation of arguments. If processing queries from untrusted parties, this may be used as a vector for denial of service attacks.",0001-01-01T00:00:00Z,2021-04-14T20:04:52Z,github.com/bytom/bytom,Go,,,
GO-2022-0220,DLL injection on Windows in runtime and syscall,"Go on Windows misused certain LoadLibrary functionality, leading to DLL injection.",0001-01-01T00:00:00Z,2022-05-25T18:01:46Z,stdlib,Go,,,
GO-2022-0701,Directory traversal in k8s.io/kubernetes,"Crafted object type names can cause directory traversal in Kubernetes.

Object names are not validated before being passed to etcd. This allows attackers to write arbitrary files via a crafted object name, hence causing directory traversal vulnerability in Kubernetes, as used in Red Hat OpenShift Enterprise 3.0.",0001-01-01T00:00:00Z,2022-02-15T01:57:18Z,k8s.io/kubernetes,Go,,,
GO-2021-0085,Authorization bypass in github.com/opencontainers/runc,"AppArmor restrictions may be bypassed due to improper validation of mount targets, allowing a malicious image to mount volumes over e.g. /proc.",0001-01-01T00:00:00Z,2021-04-14T20:04:52Z,github.com/opencontainers/runc,Go,,,
GO-2021-0075,Panic in github.com/ethereum/go-ethereum,"Due to improper argument validation in RPC messages, a maliciously crafted message can cause a panic, leading to denial of service.",0001-01-01T00:00:00Z,2021-04-14T20:04:52Z,github.com/ethereum/go-ethereum,Go,,,
GO-2023-1861,"Cosmos ""Barberry"" vulnerability in github.com/cosmos/cosmos-sdk","The cosmos-sdk module is affected by the vulnerability codenamed ""Barberry"".",0001-01-01T00:00:00Z,0001-01-01T00:00:00Z,github.com/cosmos/cosmos-sdk,Go,,,
GO-2021-0100,Denial of service via deadlock in github.com/containers/storage,"Due to a goroutine deadlock, using github.com/containers/storage/pkg/archive.DecompressStream on a xz archive returns a reader which will hang indefinitely when Close is called. An attacker can use this to cause denial of service if they are able to cause the caller to attempt to decompress an archive they control.",0001-01-01T00:00:00Z,2021-07-28T18:08:05Z,github.com/containers/storage,Go,,,
GO-2022-0166,Denial of service due to unchecked parameters in crypto/dsa,"The Verify function in crypto/dsa passed certain parameters unchecked to the underlying big integer library, possibly leading to extremely long-running computations, which in turn makes Go programs vulnerable to remote denial of service attacks. Programs using HTTPS client certificates or the Go SSH server libraries are both exposed to this vulnerability.",0001-01-01T00:00:00Z,2022-05-24T22:06:33Z,stdlib,Go,,,
GO-2023-2052,IsFromLocal local address check can be circumvented in github.com/gofiber/fiber/v2,The Ctx.IsFromLocal function can incorrectly report a request as being sent from localhost when the request contains an X-Forwarded-For header containing a localhost IP address.,0001-01-01T00:00:00Z,0001-01-01T00:00:00Z,github.com/gofiber/fiber/v2,Go,,,
GO-2022-0963,Resource exhaustion in github.com/gagliardetto/binary,"A memory allocation vulnerability can be exploited to allocate arbitrarily large slices, which can exhaust available memory or crash the program.

When parsing data from untrusted sources of input (e.g. the blockchain), the length of the slice to allocate is read directly from the data itself without any checks, which could lead to an allocation of excessive memory.",0001-01-01T00:00:00Z,2022-09-02T18:37:03Z,github.com/gagliardetto/binary,Go,,,
GO-2022-0386,Import token permissions checking not enforced in github.com/nats-io/jwt,"Import tokens valid for one account may be used for any other account.

Validation of Import token bindings incorrectly warns on mismatches, rather than rejecting the Goken. This permits a token for one account to be used for any other account.",0001-01-01T00:00:00Z,2022-07-01T20:11:22Z,github.com/nats-io/jwt,Go,,,
GO-2022-0972,Panic in github.com/shamaton/msgpack/v2,"Unmarshal can panic on some inputs, possibly allowing for denial of service attacks.",0001-01-01T00:00:00Z,0001-01-01T00:00:00Z,github.com/shamaton/msgpack/v2,Go,,,
GO-2021-0227,Panic on crafted authentication request message in golang.org/x/crypto/ssh,Clients can cause a panic in SSH servers. An attacker can craft an authentication request message for the “gssapi-with-mic” method which will cause NewServerConn to panic via a nil pointer dereference if ServerConfig.GSSAPIWithMICConfig is nil.,0001-01-01T00:00:00Z,2022-02-17T17:35:32Z,golang.org/x/crypto,Go,,,
GO-2022-0192,Improper input validation in golang.org/x/net/html,"The Parse function can panic on some invalid inputs.

For example, the Parse function panics on the input ""<math><template><mo><template>"".",0001-01-01T00:00:00Z,2022-07-01T20:11:34Z,golang.org/x/net,Go,,,
GO-2022-0233,Resource exhaustion in github.com/pires/go-proxyproto,"The PROXY protocol server does not impose a timeout on reading the header from new connections, allowing a malicious client to cause resource exhaustion and a denial of service by opening many connections and sending no data on them.

v0.6.0 of the proxyproto package adds support for a user-defined header timeout. v0.6.1 adds a default timeout of 200ms and v0.6.2 increases the default timeout to 10s.",0001-01-01T00:00:00Z,2022-07-01T20:18:04Z,github.com/pires/go-proxyproto,Go,,,
GO-2020-0040,Uncontrolled Resource Consumption in github.com/shiyanhui/dht,"Due to unchecked type assertions, maliciously crafted messages can cause panics, which may be used as a denial of service vector.",0001-01-01T00:00:00Z,2021-04-14T20:04:52Z,github.com/shiyanhui/dht,Go,,,
GO-2022-0942,Infinite recursion in parser in github.com/graphql-go/graphql,graphql-go (aka GraphQL for Go) has infinite recursion in the type definition parser.,0001-01-01T00:00:00Z,2022-08-23T13:19:13Z,github.com/graphql-go/graphql,Go,,,
GO-2022-0197,Panic when parsing certain inputs in golang.org/x/net/html,"The Parse function can panic on some invalid inputs.

For example, the Parse function panics on the input ""<svg><template><desc><t><svg></template>"".",0001-01-01T00:00:00Z,2022-07-01T20:15:19Z,golang.org/x/net,Go,,,
GO-2022-0463,Access control bypass in github.com/beego/beego and beego/v2,"Routes in the beego HTTP router can match unintended patterns. This overly-broad matching may permit an attacker to bypass access controls.

For example, the pattern ""/a/b/:name"" can match the URL ""/a.xml/b/"". This may bypass access control applied to the prefix ""/a/"".",0001-01-01T00:00:00Z,2022-07-01T20:06:59Z,github.com/astaxie/beego,Go,,,
GO-2023-1766,Denial of service from memory leak in github.com/ipfs/go-libipfs,An attacker can cause a Bitswap server to allocate and leak unbounded amounts of memory.,0001-01-01T00:00:00Z,0001-01-01T00:00:00Z,github.com/ipfs/go-libipfs,Go,,,
GO-2022-0252,Panic on misconfigured IP address in github.com/cloudflare/cfrpki,OctoRPKI crashes when a repository returns an ROA with a IP address that contains too many bits.,0001-01-01T00:00:00Z,2022-07-15T23:07:41Z,github.com/cloudflare/cfrpki,Go,,,
GO-2020-0021,SQL Injection in github.com/gogits/gogs,"Due to improper sanitization of user input, a number of methods are vulnerable to SQL injection if used with user input that has not been sanitized by the caller.",0001-01-01T00:00:00Z,2021-04-14T20:04:52Z,github.com/gogits/gogs,Go,,,
GO-2022-1113,Server-side request forgery in github.com/oam-dev/kubevela,"When using Helm Chart as the component delivery method, the request address of the warehouse is not restricted, and there is a blind SSRF vulnerability.",0001-01-01T00:00:00Z,0001-01-01T00:00:00Z,github.com/oam-dev/kubevela,Go,,,
GO-2020-0028,Denial of service in github.com/miekg/dns,"Due to a nil pointer dereference, parsing a malformed zone file containing TA records may cause a panic. If parsing user supplied input, this may be used as a denial of service vector.",0001-01-01T00:00:00Z,2021-04-14T20:04:52Z,github.com/miekg/dns,Go,,,
GO-2022-0515,Stack exhaustion due to deeply nested types in go/parser,Calling any of the Parse functions on Go source code which contains deeply nested types or declarations can cause a panic due to stack exhaustion.,0001-01-01T00:00:00Z,2022-07-20T17:01:45Z,stdlib,Go,,,
GO-2022-0247,Buffer overflow in WASM modules in misc/wasm,"When invoking functions from WASM modules, built using GOARCH=wasm GOOS=js, passing very large arguments can cause portions of the module to be overwritten with data from the arguments due to a buffer overflow error.

If using wasm_exec.js to execute WASM modules, users will need to replace their copy (as described in https://golang.org/wiki/WebAssembly#getting-started) after rebuilding any modules.",0001-01-01T00:00:00Z,2022-05-24T20:14:28Z,toolchain,Go,,,
GO-2022-1027,Path traversal in github.com/cloudwego/hertz,"Improper path sanitization on Windows permits path traversal attacks. Static file serving with the Static or StaticFS functions allows an attacker to access files from outside the filesystem root.

This vulnerability does not affect non-Windows systems.",0001-01-01T00:00:00Z,0001-01-01T00:00:00Z,github.com/cloudwego/hertz,Go,,,
GO-2022-0968,Panic on malformed packets in golang.org/x/crypto/ssh,"Unauthenticated clients can cause a panic in SSH servers.

When using AES-GCM or ChaCha20Poly1305, consuming a malformed packet which contains an empty plaintext causes a panic.",0001-01-01T00:00:00Z,2022-09-13T03:32:38Z,golang.org/x/crypto,Go,,,
GO-2020-0035,Path traversal in github.com/yi-ge/unzip,"Due to improper path sanitization, archives containing relative file paths can cause files to be written (or overwritten) outside of the target directory.",0001-01-01T00:00:00Z,2021-04-14T20:04:52Z,github.com/yi-ge/unzip,Go,,,
GO-2021-0142,Unbounded read from invalid inputs in encoding/binary,"ReadUvarint and ReadVarint can read an unlimited number of bytes from invalid inputs.

Certain invalid inputs to ReadUvarint or ReadVarint can cause these functions to read an unlimited number of bytes from the ByteReader parameter before returning an error. This can lead to processing more input than expected when the caller is reading directly from a network and depends on ReadUvarint or ReadVarint only consuming a small, bounded number of bytes, even from invalid inputs.",0001-01-01T00:00:00Z,2022-07-01T20:11:09Z,stdlib,Go,,,
GO-2022-0370,Man-in-the-middle attack due to improper validation of certificate in mellium.im/xmpp,"Websocket client connections are vulnerable to man-in-the-middle attacks via DNS spoofing.

When looking up a WSS endpoint using a DNS TXT record, the server TLS certificate is incorrectly validated using the name of the server returned by the TXT record request, not the name of the the server being connected to. This permits any attacker that can spoof a DNS record to redirect the user to a server of their choosing.

Providing a *tls.Config with a ServerName field set to the correct destination hostname will avoid this issue.",0001-01-01T00:00:00Z,2022-07-29T20:00:14Z,mellium.im/xmpp,Go,,,
GO-2020-0017,Authorization bypass in github.com/dgrijalva/jwt-go,"If a JWT contains an audience claim with an array of strings, rather than a single string, and MapClaims.VerifyAudience is called with req set to false, then audience verification will be bypassed, allowing an invalid set of audiences to be provided.",0001-01-01T00:00:00Z,2021-04-14T20:04:52Z,github.com/dgrijalva/jwt-go,Go,,,
GO-2022-1180,Verification rule bypass in github.com/kyverno/kyverno,`verifyImages` rules can be bypassed by a malicious proxy/registry.,0001-01-01T00:00:00Z,0001-01-01T00:00:00Z,github.com/kyverno/kyverno,Go,,,
GO-2022-0526,Stack exhaustion when decoding certain messages in encoding/gob,Calling Decoder.Decode on a message which contains deeply nested structures can cause a panic due to stack exhaustion.,0001-01-01T00:00:00Z,2022-07-20T20:52:17Z,stdlib,Go,,,
GO-2023-1987,Large RSA keys can cause high CPU usage in crypto/tls,"Extremely large RSA keys in certificate chains can cause a client/server to expend significant CPU time verifying signatures.

With fix, the size of RSA keys transmitted during handshakes is restricted to <= 8192 bits.

Based on a survey of publicly trusted RSA keys, there are currently only three certificates in circulation with keys larger than this, and all three appear to be test certificates that are not actively deployed. It is possible there are larger keys in use in private PKIs, but we target the web PKI, so causing breakage here in the interests of increasing the default safety of users of crypto/tls seems reasonable.",0001-01-01T00:00:00Z,0001-01-01T00:00:00Z,stdlib,Go,,,
GO-2022-0400,Race condition in github.com/ntbosscher/gobase,A race condition can cause incorrect HTTP request routing.,0001-01-01T00:00:00Z,2022-07-01T20:10:50Z,github.com/ntbosscher/gobase,Go,,,
GO-2022-0190,"Directory traversal via ""go get"" command in cmd/go","The ""go get"" command is vulnerable to directory traversal when executed with the import path of a malicious Go package which contains curly brace (both '{' and '}' characters).

Specifically, it is only vulnerable in GOPATH mode, but not in module mode (the distinction is documented at https://golang.org/cmd/go/#hdr-Module_aware_go_get). The attacker can cause an arbitrary filesystem write, which can lead to code execution.",0001-01-01T00:00:00Z,2022-08-02T15:44:23Z,toolchain,Go,,,
GO-2022-1184,OS command injection vulnerability in code.sajari.com/docconv,"The manipulation of the argument path to docconv.{ConvertPDF,PDFHasImage} leads to os command injection.",0001-01-01T00:00:00Z,0001-01-01T00:00:00Z,code.sajari.com/docconv,Go,,,
GO-2022-1059,Denial of service via crafted Accept-Language header in golang.org/x/text/language,An attacker may cause a denial of service by crafting an Accept-Language header which ParseAcceptLanguage will take significant time to parse.,0001-01-01T00:00:00Z,0001-01-01T00:00:00Z,golang.org/x/text,Go,,,
GO-2022-0643,Denial of service in github.com/elastic/beats,"A local attacker can cause a panic if they are able to send arbitrary traffic to a monitored port, due to an out of bounds read.",0001-01-01T00:00:00Z,2022-02-15T01:57:18Z,github.com/elastic/beats,Go,,,
GO-2022-0535,Certificate validation bypass on Windows in crypto/x509,"A Windows vulnerability allows attackers to spoof valid certificate chains when the system root store is in use.

A workaround is present in Go 1.12.6+ and Go 1.13.7+, but affected users should additionally install the Windows security update to protect their system.

See https://msrc.microsoft.com/update-guide/en-US/vulnerability/CVE-2020-0601 for details on the Windows vulnerability.",0001-01-01T00:00:00Z,2022-08-01T22:21:17Z,stdlib,Go,,,
GO-2022-0536,Reset flood in net/http and golang.org/x/net/http,"Some HTTP/2 implementations are vulnerable to a reset flood, potentially leading to a denial of service.

Servers that accept direct connections from untrusted clients could be remotely made to allocate an unlimited amount of memory, until the program crashes. The attacker opens a number of streams and sends an invalid request over each stream that should solicit a stream of RST_STREAM frames from the peer. Depending on how the peer queues the RST_STREAM frames, this can consume excess memory, CPU, or both.",0001-01-01T00:00:00Z,2022-08-01T22:20:53Z,stdlib,Go,,,
GO-2022-1165,Denial of service via repository index file in helm.sh/helm/v3,"Applications that use the repo package in the Helm SDK to parse an index file can suffer a Denial of Service when that input causes a panic that cannot be recovered from.

The repo package contains a handler that processes the index file of a repository. For example, the Helm client adds references to chart repositories where charts are managed. The repo package parses the index file of the repository and loads it into memory. Some index files can cause array data structures to be created causing a memory violation.

The Helm Client will panic with an index file that causes a memory violation panic. Helm is not a long running service so the panic will not affect future uses of the Helm client.",0001-01-01T00:00:00Z,0001-01-01T00:00:00Z,helm.sh/helm/v3,Go,,,
GO-2022-0525,Improper sanitization of Transfer-Encoding headers in net/http,"The HTTP/1 client accepted some invalid Transfer-Encoding headers as indicating a ""chunked"" encoding. This could potentially allow for request smuggling, but only if combined with an intermediate server that also improperly failed to reject the header as invalid.",0001-01-01T00:00:00Z,2022-07-25T17:34:18Z,stdlib,Go,,,
GO-2023-1821,The x/crisis package does not cause chain halt in github.com/cosmos/cosmos-sdk,"If an invariant check fails on a Cosmos SDK network, and a transaction is sent to the x/crisis package to halt the chain, the chain does not halt as originally intended.

No patch will be released, as the package is planned to be deprecated and replaced.",0001-01-01T00:00:00Z,0001-01-01T00:00:00Z,github.com/cosmos/cosmos-sdk,Go,,,
GO-2022-1052,Uncontrolled resource consumption during consensus in github.com/tendermint/tendermint,"Mishandling of timestamps during consensus process can cause a denial of service.

While reaching consensus, different tendermint nodes can observe a different timestamp for a consensus evidence. This mismatch can cause the evidence to be invalid, upon which the node producing the evidence will be asked to generate a new evidence. This new evidence will be the same, which means it will again be rejected by other nodes involved in the consensus. This loop will continue until the peer nodes decide to disconnect from the node producing the evidence.",0001-01-01T00:00:00Z,0001-01-01T00:00:00Z,github.com/tendermint/tendermint,Go,,,
GO-2022-0346,Path traversal in github.com/quay/claircore,A maliciously crafted RPM file can cause the Scanner.Scan function to write files with arbitrary contents to arbitrary locations on the local filestem.,0001-01-01T00:00:00Z,2022-07-15T23:30:27Z,github.com/quay/claircore,Go,,,
GO-2022-0217,Denial of service affecting P-521 and P-384 curves in crypto/elliptic,"A DoS vulnerability in the crypto/elliptic implementations of the P-521 and P-384 elliptic curves may let an attacker craft inputs that consume excessive amounts of CPU.

These inputs might be delivered via TLS handshakes, X.509 certificates, JWT tokens, ECDH shares or ECDSA signatures. In some cases, if an ECDH private key is reused more than once, the attack can also lead to key recovery.",0001-01-01T00:00:00Z,2022-05-24T15:21:01Z,stdlib,Go,,,
GO-2020-0050,XML digital signature validation bypass in github.com/russellhaering/goxmldsig,"Due to the behavior of encoding/xml, a crafted XML document may cause XML Digital Signature validation to be entirely bypassed, causing an unsigned document to appear signed.",0001-01-01T00:00:00Z,2021-04-14T20:04:52Z,github.com/russellhaering/goxmldsig,Go,,,
GO-2023-1751,Improper sanitization of CSS values in html/template,"Angle brackets (<>) are not considered dangerous characters when inserted into CSS contexts. Templates containing multiple actions separated by a '/' character can result in unexpectedly closing the CSS context and allowing for injection of unexpected HTML, if executed with untrusted input.",0001-01-01T00:00:00Z,0001-01-01T00:00:00Z,stdlib,Go,,,
GO-2022-1166,Denial of service via schema file in helm.sh/helm/v3,"Certain JSON schema validation files can cause a Helm Client to panic, leading to a possible denial of service.

The chartutil package contains a parser that loads a JSON Schema validation file. For example, the Helm client when rendering a chart will validate its values with the schema file. The chartutil package parses the schema file and loads it into memory, but some schema files can cause array data structures to be created causing a memory violation.

The Helm Client will panic with a schema file that causes a memory violation panic. Helm is not a long running service so the panic will not affect future uses of the Helm client.",0001-01-01T00:00:00Z,0001-01-01T00:00:00Z,helm.sh/helm/v3,Go,,,
GO-2022-0587,Out of bounds memory access in github.com/open-policy-agent/opa,"An issue in ast.Parser in Open Policy Agent causes the application to incorrectly interpret expressions, allowing a Denial of Service (DoS) via triggering out-of-range memory access.",0001-01-01T00:00:00Z,2022-05-20T00:00:26Z,github.com/open-policy-agent/opa,Go,,,
GO-2021-0172,Denial of service when parsing large forms in mime/multipart,"When parsing large multipart/form-data, an attacker can cause a HTTP server to open a large number of file descriptors. This may be used as a denial-of-service vector.",0001-01-01T00:00:00Z,2022-02-15T23:56:14Z,stdlib,Go,,,
GO-2021-0064,Unauthorized credential disclosure in k8s.io/kubernetes and k8s.io/client-go,Authorization tokens may be inappropriately logged if the verbosity level is set to a debug level.,0001-01-01T00:00:00Z,2021-04-14T20:04:52Z,k8s.io/client-go,Go,,,
GO-2023-1874,Denial of service in github.com/corazawaf/coraza/v2 and v3,"Due to the misuse of log.Fatalf, Coraza may crash after receiving crafted requests from attackers.",0001-01-01T00:00:00Z,0001-01-01T00:00:00Z,github.com/corazawaf/coraza/v2,Go,,,
GO-2021-0076,Out-of-bounds write in github.com/evanphx/json-patch,A malicious JSON patch can cause a panic due to an out-of-bounds write attempt. This can be used as a denial of service vector if exposed to arbitrary user input.,0001-01-01T00:00:00Z,2021-04-14T20:04:52Z,github.com/evanphx/json-patch,Go,,,
GO-2020-0005,Panic due to malformed WALs in go.etcd.io/etcd,"Malformed WALs can be constructed such that WAL.ReadAll can cause attempted out of bounds reads, or creation of arbitrarily sized slices, which may be used as a DoS vector.",0001-01-01T00:00:00Z,2021-04-14T20:04:52Z,go.etcd.io/etcd,Go,,,
GO-2023-1878,Insufficient sanitization of Host header in net/http,"The HTTP/1 client does not fully validate the contents of the Host header. A maliciously crafted Host header can inject additional headers or entire requests.

With fix, the HTTP/1 client now refuses to send requests containing an invalid Request.Host or Request.URL.Host value.",0001-01-01T00:00:00Z,0001-01-01T00:00:00Z,stdlib,Go,,,
GO-2020-0015,Infinite loop when decoding some inputs in golang.org/x/text,"An attacker could provide a single byte to a UTF16 decoder instantiated with UseBOM or ExpectBOM to trigger an infinite loop if the String function on the Decoder is called, or the Decoder is passed to transform.String. If used to parse user supplied input, this may be used as a denial of service vector.",0001-01-01T00:00:00Z,2021-04-14T20:04:52Z,golang.org/x/text,Go,,,
GO-2023-1992,Misleading message verification in golang.org/x/crypto/openpgp/clearsign,"The clearsign package accepts some malformed messages, making it possible for an attacker to trick a human user (but not a Go program) into thinking unverified text is part of the message.

With fix, messages with malformed headers in the SIGNED MESSAGE section are rejected.",0001-01-01T00:00:00Z,0001-01-01T00:00:00Z,golang.org/x/crypto,Go,,,
GO-2020-0037,Uncontrolled resource consumption in github.com/tendermint/tendermint,"Due to support of Gzip compression in request bodies, as well as a lack of limiting response body sizes, a malicious server can cause a client to consume a significant amount of system resources, which may be used as a denial of service vector.",0001-01-01T00:00:00Z,2021-04-14T20:04:52Z,github.com/tendermint/tendermint,Go,,,
GO-2022-1129,Authentication bypass in github.com/crewjam/saml,Authentication bypass is possible when processing SAML responses containing multiple Assertion elements.,0001-01-01T00:00:00Z,0001-01-01T00:00:00Z,github.com/crewjam/saml,Go,,,
GO-2021-0240,Panic when reading certain archives in archive/zip,"NewReader and OpenReader can cause a panic or an unrecoverable fatal error when reading an archive that claims to contain a large number of files, regardless of its actual size.",0001-01-01T00:00:00Z,2022-02-17T17:33:25Z,stdlib,Go,,,
GO-2022-0379,Type confusion in github.com/docker/distribution,"Systems that rely on digest equivalence for image attestations may be vulnerable to type confusion.

A maliciously crafted OCI Container Image can cause registry clients to parse the same image in two different ways without modifying the image's digest, invalidating the common pattern of relying on container image digests for equivalence.

This problem has been addressed in newer versions by improving validation in manifest unmarshalling.",0001-01-01T00:00:00Z,2022-07-29T20:00:03Z,github.com/docker/distribution,Go,,,
GO-2021-0066,Sensitive information leak via log file in k8s.io/kubernetes,Attempting to read a malformed .dockercfg may cause secrets to be inappropriately logged.,0001-01-01T00:00:00Z,2021-04-14T20:04:52Z,k8s.io/kubernetes,Go,,,
GO-2022-0945,Signature validation bypass in gopkg.in/square/go-jose.v1,"The go-jose library suffers from multiple signatures exploitation. When validating a signed message, the API did not indicate which signature was valid, which creates the potential for confusion.",0001-01-01T00:00:00Z,2022-08-22T17:59:45Z,gopkg.in/square/go-jose.v1,Go,,,
GO-2022-0470,No access control in github.com/blevesearch/bleve and bleve/v2,"HTTP handlers provide unauthenticated access to the local filesystem.

The Bleve http package is intended for demonstration purposes and contains no authentication, authorization, or validation of user inputs. Exposing handlers from this package can permit attackers to create files and delete directories.",0001-01-01T00:00:00Z,2022-07-15T23:29:55Z,github.com/blevesearch/bleve,Go,,,
GO-2022-0213,Panic on invalid DSA public keys in crypto/dsa,"Invalid DSA public keys can cause a panic in dsa.Verify. In particular, using crypto/x509.Verify on a crafted X.509 certificate chain can lead to a panic, even if the certificates don't chain to a trusted root. The chain can be delivered via a crypto/tls connection to a client, or to a server that accepts and verifies client certificates. net/http clients can be made to crash by an HTTPS server, while net/http servers that accept client certificates will recover the panic and are unaffected.

Moreover, an application might crash invoking crypto/x509.(*CertificateRequest).CheckSignature on an X.509 certificate request, parsing a golang.org/x/crypto/openpgp Entity, or during a golang.org/x/crypto/otr conversation. Finally, a golang.org/x/crypto/ssh client can panic due to a malformed host key, while a server could panic if either PublicKeyCallback accepts a malformed public key, or if IsUserAuthority accepts a certificate with a malformed public key.",0001-01-01T00:00:00Z,2022-05-24T20:14:11Z,stdlib,Go,,,
GO-2022-1053,Incorrect signatures in github.com/supranational/blst,"Potential creation of an invalid signature from correct inputs.

Some inputs to the blst_fp_eucl_inverse function can produce incorrect outputs. This could theoretically permit the creation of an invalid signature from correct inputs.",0001-01-01T00:00:00Z,0001-01-01T00:00:00Z,github.com/supranational/blst,Go,,,
GO-2023-1664,Denial of service via deflate compression bomb in github.com/crewjam/saml,Denial of service via deflate compression bomb in github.com/crewjam/saml,0001-01-01T00:00:00Z,0001-01-01T00:00:00Z,github.com/crewjam/saml,Go,,,
GO-2022-0572,Access control bypass in github.com/beego/beego and beego/v2,An issue was discovered in the route lookup process in beego which attackers to bypass access control.,0001-01-01T00:00:00Z,2022-08-22T17:56:17Z,github.com/astaxie/beego,Go,,,
GO-2022-0520,Exposure of client IP addresses in net/http,"Client IP adresses may be unintentionally exposed via X-Forwarded-For headers.

When httputil.ReverseProxy.ServeHTTP is called with a Request.Header map containing a nil value for the X-Forwarded-For header, ReverseProxy sets the client IP as the value of the X-Forwarded-For header, contrary to its documentation.

In the more usual case where a Director function sets the X-Forwarded-For header value to nil, ReverseProxy leaves the header unmodified as expected.",0001-01-01T00:00:00Z,2022-07-28T17:23:05Z,stdlib,Go,,,
GO-2021-0245,Panic in ReverseProxy in net/http/httputil,ReverseProxy can panic after encountering a problem copying a proxied response body.,0001-01-01T00:00:00Z,2022-02-17T17:32:24Z,stdlib,Go,,,
GO-2023-2119,Proof forgery due to insufficient randomness in github.com/consensys/gnark,"A a third party may derive a valid proof from a valid initial tuple {proof, public_inputs}, corresponding to the same public inputs as the initial proof. This vulnerability is due to randomness being generated using a small part of the scratch memory describing the state, allowing for degrees of freedom in the transcript. Note that the impact is limited to the PlonK verifier smart contract.",0001-01-01T00:00:00Z,0001-01-01T00:00:00Z,github.com/consensys/gnark,Go,,,
GO-2023-1989,Excessive resource consumption in golang.org/x/image/tiff,"The TIFF decoder does not place a limit on the size of compressed tile data. A maliciously-crafted image can exploit this to cause a small image (both in terms of pixel width/height, and encoded size) to make the decoder decode large amounts of compressed data, consuming excessive memory and CPU.",0001-01-01T00:00:00Z,0001-01-01T00:00:00Z,golang.org/x/image,Go,,,
GO-2022-0762,Cross-site scripting in github.com/microcosm-cc/bluemonday,An XSS injection was possible because the sanitization of the Cyrillic character i bypass a protection mechanism against user-inputted HTML elements such as the <script> tag.,0001-01-01T00:00:00Z,2021-05-18T21:07:37Z,github.com/microcosm-cc/bluemonday,Go,,,
GO-2021-0223,Certificate verification error on Windows in crypto/x509,"On Windows, if VerifyOptions.Roots is nil, Certificate.Verify does not check the EKU requirements specified in VerifyOptions.KeyUsages. This may allow a certificate to be used for an unintended purpose.",0001-01-01T00:00:00Z,2022-02-17T17:46:03Z,stdlib,Go,,,
GO-2022-0209,Insufficiently random values in golang.org/x/crypto/salsa20,"XORKeyStream generates incorrect and insecure output for very large inputs.

If more than 256 GiB of keystream is generated, or if the counter otherwise grows greater than 32 bits, the amd64 implementation will first generate incorrect output, and then cycle back to previously generated keystream. Repeated keystream bytes can lead to loss of confidentiality in encryption applications, or to predictability in CSPRNG applications.

The issue might affect uses of golang.org/x/crypto/nacl with extremely large messages.

Architectures other than amd64 and uses that generate less than 256 GiB of keystream for a single salsa20.XORKeyStream invocation are unaffected.",0001-01-01T00:00:00Z,2022-07-01T20:15:25Z,golang.org/x/crypto,Go,,,
GO-2022-0355,Path traversal in github.com/valyala/fasthttp,"The fasthttp.FS request handler is vulnerable to directory traversal attacks on Windows systems, and can serve files from outside the provided root directory.

URL path normalization does not handle Windows path separators (backslashes), permitting an attacker to construct requests with relative paths.",0001-01-01T00:00:00Z,2022-07-27T20:26:59Z,github.com/valyala/fasthttp,Go,,,
GO-2022-0957,Denial of service in github.com/tidwall/gjson,A maliciously crafted JSON input can cause a denial of service attack.,0001-01-01T00:00:00Z,2022-08-25T06:28:20Z,github.com/tidwall/gjson,Go,,,
GO-2020-0014,"Infinite loop due to improper handling of ""select"" tags in golang.org/x/net/html","html.Parse does not properly handle ""select"" tags, which can lead to an infinite loop. If parsing user supplied input, this may be used as a denial of service vector.",0001-01-01T00:00:00Z,2021-04-14T20:04:52Z,golang.org/x/net,Go,,,
GO-2022-0274,Namespace restriction bypass in github.com/opencontainers/runc,An attacker with partial control over the bind mount sources of a new container can bypass namespace restrictions.,0001-01-01T00:00:00Z,2022-07-15T23:08:20Z,github.com/opencontainers/runc,Go,,,
GO-2021-0106,Path traversal in github.com/whyrusleeping/tar-utils,"Due to improper path sanitization, archives containing relative file paths can cause files to be written (or overwritten) outside of the target directory.",0001-01-01T00:00:00Z,2021-07-28T18:08:05Z,github.com/whyrusleeping/tar-utils,Go,,,
GO-2022-0574,Denial of service in github.com/open-policy-agent/opa,An issue in the AST parser of Open Policy Agent makes it possible for attackers to cause a Denial of Service attack from a crafted input.,0001-01-01T00:00:00Z,2022-07-01T00:01:03Z,github.com/open-policy-agent/opa,Go,,,
GO-2023-2044,Panic when processing post-handshake message on QUIC connections in crypto/tls,Processing an incomplete post-handshake message for a QUIC connection can cause a panic.,0001-01-01T00:00:00Z,0001-01-01T00:00:00Z,stdlib,Go,,,
GO-2020-0008,Insecure generation of random numbers in github.com/miekg/dns,DNS message transaction IDs are generated using math/rand which makes them relatively predictable. This reduces the complexity of response spoofing attacks against DNS clients.,0001-01-01T00:00:00Z,2021-04-14T20:04:52Z,github.com/miekg/dns,Go,,,
GO-2022-1045,Improper validation of signature hash algorithms in github.com/sylabs/sif/v2,The Singularity Image Format (SIF) reference implementation does not verify that the hash algorithm(s) used are cryptographically secure when verifying digital signatures.,0001-01-01T00:00:00Z,0001-01-01T00:00:00Z,github.com/sylabs/sif/v2,Go,,,
GO-2022-1130,Authentication bypass in github.com/prometheus/exporter-toolkit,"If an attacker has access to a Prometheus web.yml file and users' bcrypted passwords, it would be possible to bypass security via the built-in authentication cache.",0001-01-01T00:00:00Z,0001-01-01T00:00:00Z,github.com/prometheus/exporter-toolkit,Go,,,
GO-2023-1717,Improper handling of keyspaces in vitess.io/vitess,Users can create a keyspace containing `/`. Future attempts to view keyspaces from some tools (including VTAdmin and `vtctldclient GetKeyspaces`) receive an error.,0001-01-01T00:00:00Z,0001-01-01T00:00:00Z,vitess.io/vitess,Go,,,
GO-2023-1574,Privilege escalation via supplementary groups in github.com/containerd/containerd,"Supplementary groups are not set up properly inside a container. If an attacker has direct access to a container and manipulates their supplementary group access, they may be able to use supplementary group access to bypass primary group restrictions in some cases and potentially escalate privileges in the container. Uses of the containerd client library may also have improperly setup supplementary groups.",0001-01-01T00:00:00Z,0001-01-01T00:00:00Z,github.com/containerd/containerd,Go,,,
GO-2022-0524,Stack exhaustion when reading certain archives in compress/gzip,Calling Reader.Read on an archive containing a large number of concatenated 0-length compressed files can cause a panic due to stack exhaustion.,0001-01-01T00:00:00Z,2022-07-20T20:52:11Z,stdlib,Go,,,
GO-2021-0103,Denial of service in github.com/holiman/uint256,"Due to improper bounds checking, certain mathematical operations can cause a panic via an out of bounds read. If this package is used to process untrusted user inputs, this may be used as a vector for a denial of service attack.",0001-01-01T00:00:00Z,2021-07-28T18:08:05Z,github.com/holiman/uint256,Go,,,
GO-2022-0177,"Remote command execution via ""go get"" in cmd/go","The ""go get"" command allows remote command execution.

Using custom domains, it is possible to arrange things so that example.com/pkg1 points to a Subversion repository but example.com/pkg1/pkg2 points to a Git repository. If the Subversion repository includes a Git checkout in its pkg2 directory and some other work is done to ensure the proper ordering of operations, ""go get"" can be tricked into reusing this Git checkout for the fetch of code from pkg2. If the Subversion repository's Git checkout has malicious commands in .git/hooks/, they will execute on the system running ""go get"".",0001-01-01T00:00:00Z,2022-08-09T17:31:35Z,toolchain,Go,,,
GO-2020-0041,Path Traversal in github.com/unknwon/cae,"Due to improper path sanitization, archives containing relative file paths can cause files to be written (or overwritten) outside of the target directory.",0001-01-01T00:00:00Z,2021-04-14T20:04:52Z,github.com/unknwon/cae,Go,,,
GO-2023-2046,Unbounded memory consumption in github.com/ethereum/go-ethereum,Unbounded memory consumption in github.com/ethereum/go-ethereum,0001-01-01T00:00:00Z,0001-01-01T00:00:00Z,github.com/ethereum/go-ethereum,Go,,,
GO-2022-0246,Insufficient validation in github.com/cloudflare/cfrpki,"The ROAEntry.Validate function fails to perform bounds checks on the MaxLength field, allowing invalid values to pass validation.",0001-01-01T00:00:00Z,2022-07-15T23:06:38Z,github.com/cloudflare/cfrpki,Go,,,
GO-2021-0065,Unauthorized credential disclosure in k8s.io/kubernetes and k8s.io/client-go,Authorization tokens may be inappropriately logged if the verbosity level is set to a debug level.,0001-01-01T00:00:00Z,2021-04-14T20:04:52Z,k8s.io/client-go,Go,,,
GO-2023-2077,Authentication bypass in github.com/sagernet/sing,Authentication bypass in github.com/sagernet/sing,0001-01-01T00:00:00Z,0001-01-01T00:00:00Z,github.com/sagernet/sing,Go,,,
GO-2020-0020,Improper access control in github.com/gorilla/handlers,"Usage of the CORS handler may apply improper CORS headers, allowing the requester to explicitly control the value of the Access-Control-Allow-Origin header, which bypasses the expected behavior of the Same Origin Policy.",0001-01-01T00:00:00Z,2021-04-14T20:04:52Z,github.com/gorilla/handlers,Go,,,
GO-2021-0094,Directory traversal in github.com/hashicorp/go-slug,Protections against directory traversal during archive extraction can be bypassed by chaining multiple symbolic links within the archive. This allows a malicious attacker to cause files to be created outside of the target directory. Additionally if the attacker is able to read extracted files they may create symbolic links to arbitrary files on the system which the unpacker has permissions to read.,0001-01-01T00:00:00Z,2021-04-14T20:04:52Z,github.com/hashicorp/go-slug,Go,,,
GO-2023-1494,SQL injection in github.com/elgs/gosqljson,There is a potential for SQL injection through manipulation of the sqlStatement argument.,0001-01-01T00:00:00Z,0001-01-01T00:00:00Z,github.com/elgs/gosqljson,Go,,,
GO-2022-0294,Improper input validation in github.com/google/go-attestation,"A local attacker can defeat remotely-attested measured boot.

Improper input validation in AKPublic.Verify can cause it to succeed when provided with a maliciously-formed Quote over no/some PCRs. Subsequent use of the same set of PCR values in Eventlog.Verify lacks the authentication performed by quote verification, meaning a local attacker can couple this vulnerability with a maliciously-formed TCG log in Eventlog.Verify to spoof events in the TCG log, defeating remotely-attested measured-boot.",0001-01-01T00:00:00Z,2022-07-15T23:27:21Z,github.com/google/go-attestation,Go,,,
GO-2023-1914,Brute-force of token secrets in github.com/superfly/tokenizer,Brute-force of token secrets in github.com/superfly/tokenizer,0001-01-01T00:00:00Z,0001-01-01T00:00:00Z,github.com/superfly/tokenizer,Go,,,
GO-2021-0109,Improper handling of token revocation in github.com/ory/fosite,"Due to improper error handling, an error with the underlying token storage may cause a user to believe a token has been successfully revoked when it is in fact still valid. An attackers ability to exploit this relies on an ability to trigger errors in the underlying storage.",0001-01-01T00:00:00Z,2021-07-28T18:08:05Z,github.com/ory/fosite,Go,,,
GO-2021-0112,Improper input validation in go.mongodb.org/mongo-driver,"Due to improper input sanitization when marshalling Go objects into BSON, a maliciously constructed Go structure could allow an attacker to inject additional fields into a MongoDB document. Users are affected if they use this package to handle untrusted user input.",0001-01-01T00:00:00Z,2021-07-28T18:08:05Z,go.mongodb.org/mongo-driver,Go,,,
GO-2022-0706,Information disclosure in go.elastic.co/apm,Sensitive HTTP headers may not be properly sanitized before being sent to the APM server if the program panics.,0001-01-01T00:00:00Z,2021-05-18T18:34:18Z,go.elastic.co/apm,Go,,,
GO-2021-0051,Directory traversal on Windows in github.com/labstack/echo/v4,"Due to improper sanitization of user input on Windows, the static file handler allows for directory traversal, allowing an attacker to read files outside of the target directory that the server has permission to read.",0001-01-01T00:00:00Z,2021-04-14T20:04:52Z,github.com/labstack/echo/v4,Go,,,
GO-2020-0001,Arbitrary log line injection in github.com/gin-gonic/gin,"The default Formatter for the Logger middleware (LoggerConfig.Formatter), which is included in the Default engine, allows attackers to inject arbitrary log entries by manipulating the request path.",0001-01-01T00:00:00Z,2021-04-14T20:04:52Z,github.com/gin-gonic/gin,Go,,,
GO-2022-0422,Panic when decoding invalid blocks in github.com/ipld/go-codec-dagpb,The dag-pb codec can panic when decoding invalid blocks.,0001-01-01T00:00:00Z,2022-07-01T20:08:04Z,github.com/ipld/go-codec-dagpb,Go,,,
GO-2020-0048,Denial of service in github.com/antchfx/xmlquery,"LoadURL does not check the Content-Type of loaded resources, which can cause a panic due to nil pointer deference if the loaded resource is not XML. If user supplied URLs are loaded, this may be used as a denial of service vector.",0001-01-01T00:00:00Z,2021-04-14T20:04:52Z,github.com/antchfx/xmlquery,Go,,,
GO-2020-0039,Open redirect in gopkg.in/macaron.v1,"Due to improper request sanitization, a specifically crafted URL can cause the static file handler to redirect to an attacker chosen URL, allowing for open redirect attacks.",0001-01-01T00:00:00Z,2021-04-14T20:04:52Z,gopkg.in/macaron.v1,Go,,,
GO-2023-2048,Paths outside of the rootfs could be produced on Windows,Certain rootfs and path combinations result in generated paths that are outside of the provided rootfs on Windows.,0001-01-01T00:00:00Z,0001-01-01T00:00:00Z,github.com/cyphar/filepath-securejoin,Go,,,
GO-2023-1569,Excessive resource consumption in mime/multipart,"A denial of service is possible from excessive resource consumption in net/http and mime/multipart.

Multipart form parsing with mime/multipart.Reader.ReadForm can consume largely unlimited amounts of memory and disk files. This also affects form parsing in the net/http package with the Request methods FormFile, FormValue, ParseMultipartForm, and PostFormValue.

ReadForm takes a maxMemory parameter, and is documented as storing ""up to maxMemory bytes +10MB (reserved for non-file parts) in memory"". File parts which cannot be stored in memory are stored on disk in temporary files. The unconfigurable 10MB reserved for non-file parts is excessively large and can potentially open a denial of service vector on its own. However, ReadForm did not properly account for all memory consumed by a parsed form, such as map entry overhead, part names, and MIME headers, permitting a maliciously crafted form to consume well over 10MB. In addition, ReadForm contained no limit on the number of disk files created, permitting a relatively small request body to create a large number of disk temporary files.

With fix, ReadForm now properly accounts for various forms of memory overhead, and should now stay within its documented limit of 10MB + maxMemory bytes of memory consumption. Users should still be aware that this limit is high and may still be hazardous.

In addition, ReadForm now creates at most one on-disk temporary file, combining multiple form parts into a single temporary file. The mime/multipart.File interface type's documentation states, ""If stored on disk, the File's underlying concrete type will be an *os.File."". This is no longer the case when a form contains more than one file part, due to this coalescing of parts into a single file. The previous behavior of using distinct files for each form part may be reenabled with the environment variable GODEBUG=multipartfiles=distinct.

Users should be aware that multipart.ReadForm and the http.Request methods that call it do not limit the amount of disk consumed by temporary files. Callers can limit the size of form data with http.MaxBytesReader.",0001-01-01T00:00:00Z,0001-01-01T00:00:00Z,stdlib,Go,,,
GO-2022-0414,Command injection in github.com/Masterminds/vcs,"Passing untrusted inputs to VCS functions can permit an attacker to execute arbitrary commands.

The vcs package executes version control commands with user-provided arguments. These arguments can be interpreted as command-line flags, which can be used to perform command injection.",0001-01-01T00:00:00Z,2022-07-01T20:08:17Z,github.com/Masterminds/vcs,Go,,,
GO-2020-0009,Integer overflow in github.com/square/go-jose,"On 32-bit platforms an attacker can manipulate a ciphertext encrypted with AES-CBC with HMAC such that they can control how large the input buffer is when computing the HMAC authentication tag. This can can allow a manipulated ciphertext to be verified as authentic, opening the door for padding oracle attacks.",0001-01-01T00:00:00Z,2021-04-14T20:04:52Z,github.com/square/go-jose,Go,,,
GO-2021-0178,Cleartext transmission of credentials in net/smtp,"SMTP clients using net/smtp can use the PLAIN authentication scheme on network connections not secured with TLS, exposing passwords to man-in-the-middle SMTP servers.",0001-01-01T00:00:00Z,2022-01-07T20:35:00Z,stdlib,Go,,,
GO-2022-0251,Panic on NUL character in ROA in github.com/cloudflare/cfrpki,OctoRPKI crashes when a repository returns an invalid ROA that is only an encoded NUL character (\0).,0001-01-01T00:00:00Z,2022-07-15T23:07:28Z,github.com/cloudflare/cfrpki,Go,,,
GO-2021-0319,Incorrect computation for some invalid field elements in crypto/elliptic,Some big.Int values that are not valid field elements (negative or overflowing) might cause Curve.IsOnCurve to incorrectly return true. Operating on those values may cause a panic or an invalid curve operation. Note that Unmarshal will never return such values.,0001-01-01T00:00:00Z,2022-05-23T22:15:21Z,stdlib,Go,,,
GO-2023-1515,Denial of service when processing Git credentials in github.com/rancher/wrangler,"A denial of service (DoS) vulnerability exists in the Wrangler Git package. Specially crafted Git credentials can result in a denial of service (DoS) attack on an application that uses Wrangler due to the exhaustion of the available memory and CPU resources.

This is caused by a lack of input validation of Git credentials before they are used, which may lead to a denial of service in some cases. This issue can be triggered when accessing both private and public Git repositories.

A workaround is to sanitize input passed to the Git package to remove potential unsafe and ambiguous characters. Otherwise, the best course of action is to update to a patched Wrangler version.",0001-01-01T00:00:00Z,0001-01-01T00:00:00Z,github.com/rancher/wrangler,Go,,,
GO-2022-0586,Resource exhaustion in github.com/hashicorp/go-getter and related modules,"Malicious HTTP responses can cause a number of misbehaviors, including overwriting local files, resource exhaustion, and panics.

* Protocol switching, endless redirect, and configuration bypass are possible through abuse of custom HTTP response header processing.

* Arbitrary host access is possible through go-getter path traversal, symlink processing, and command injection flaws.

* Asymmetric resource exhaustion can occur when go-getter processes malicious HTTP responses.

* A panic can be triggered when go-getter processed password-protected ZIP files.",0001-01-01T00:00:00Z,2022-05-26T00:01:27Z,github.com/hashicorp/go-getter,Go,,,
GO-2023-2096,Signature malleability in github.com/consensys/gnark-crypto,Signature malleability in github.com/consensys/gnark-crypto,0001-01-01T00:00:00Z,0001-01-01T00:00:00Z,github.com/consensys/gnark-crypto,Go,,,
GO-2023-1839,Code injection via go command with cgo in cmd/go,"The go command may generate unexpected code at build time when using cgo. This may result in unexpected behavior when running a go program which uses cgo.

This may occur when running an untrusted module which contains directories with newline characters in their names. Modules which are retrieved using the go command, i.e. via ""go get"", are not affected (modules retrieved using GOPATH-mode, i.e. GO111MODULE=off, may be affected).",0001-01-01T00:00:00Z,0001-01-01T00:00:00Z,toolchain,Go,,,
GO-2022-0322,Uncontrolled resource consumption in github.com/prometheus/client_golang,"The Prometheus client_golang HTTP server is vulnerable to a denial of service attack when handling requests with non-standard HTTP methods.

In order to be affected, an instrumented software must use any of the promhttp.InstrumentHandler* middleware except `RequestsInFlight`; not filter any specific methods (e.g GET) before middleware; pass a metric with a ""method"" label name to a middleware; and not have any firewall/LB/proxy that filters away requests with unknown ""method"".",0001-01-01T00:00:00Z,2022-07-15T23:29:02Z,github.com/prometheus/client_golang,Go,,,
GO-2020-0027,Privilege escalation in github.com/google/fscrypt,"After dropping and then elevating process privileges euid, guid, and groups are not properly restored to their original values, allowing an unprivileged user to gain membership in the root group.",0001-01-01T00:00:00Z,2021-04-14T20:04:52Z,github.com/google/fscrypt,Go,,,
GO-2021-0101,Panic due to out-of-bounds read in github.com/apache/thrift,"Due to an improper bounds check, parsing maliciously crafted messages can cause panics. If this package is used to parse untrusted input, this may be used as a vector for a denial of service attack.",0001-01-01T00:00:00Z,2021-07-28T18:08:05Z,github.com/apache/thrift,Go,,,
GO-2022-0236,Panic due to large headers in net/http and golang.org/x/net/http/httpguts,"A malicious HTTP server or client can cause the net/http client or server to panic.

ReadRequest and ReadResponse can hit an unrecoverable panic when reading a very large header (over 7MB on 64-bit architectures, or over 4MB on 32-bit ones). Transport and Client are vulnerable and the program can be made to crash by a malicious server. Server is not vulnerable by default, but can be if the default max header of 1MB is overridden by setting Server.MaxHeaderBytes to a higher value, in which case the program can be made to crash by a malicious client.

This also affects golang.org/x/net/http2/h2c and HeaderValuesContainsToken in golang.org/x/net/http/httpguts.",0001-01-01T00:00:00Z,2022-07-15T23:04:18Z,stdlib,Go,,,
GO-2023-1881,The x/crisis package does not charge ConstantFee in github.com/cosmos/cosmos-sdk,"If a transaction is sent to the `x/crisis` module to check an invariant, the ConstantFee parameter of the chain is not charged.

No patch will be released, as the package is planned to be deprecated and replaced.",0001-01-01T00:00:00Z,0001-01-01T00:00:00Z,github.com/cosmos/cosmos-sdk,Go,,,
GO-2020-0006,Denial of service in github.com/miekg/dns,"An attacker may prevent TCP connections to a Server by opening a connection and leaving it idle, until the connection is closed by the server no other connections will be accepted.",0001-01-01T00:00:00Z,2021-04-14T20:04:52Z,github.com/miekg/dns,Go,,,
GO-2021-0070,Privilege escalation in github.com/opencontainers/runc,"GetExecUser in the github.com/opencontainers/runc/libcontainer/user package will improperly interpret numeric UIDs as usernames. If the method is used without verifying that usernames are formatted as expected, it may allow a user to gain unexpected privileges.",0001-01-01T00:00:00Z,2021-04-14T20:04:52Z,github.com/opencontainers/runc,Go,,,
GO-2022-0193,Improper input validation in golang.org/x/net/html,"The Parse function can panic on some invalid inputs.

For example, the Parse function panics on the input ""<template><tBody><isindex/action=0>"".",0001-01-01T00:00:00Z,2022-07-06T18:14:54Z,golang.org/x/net,Go,,,
GO-2023-2074,Parser out-of-bounds read vulnerability caused by a malformed markdown input,Parser out-of-bounds read vulnerability caused by a malformed markdown input,0001-01-01T00:00:00Z,0001-01-01T00:00:00Z,github.com/gomarkdown/markdown,Go,,,
GO-2021-0237,Open redirect in github.com/AndrewBurian/powermux,Attackers may be able to craft phishing links and other open redirects by exploiting PowerMux's trailing slash redirection feature. This may lead to users being redirected to untrusted sites after following an attacker crafted link.,0001-01-01T00:00:00Z,2022-01-11T17:18:11Z,github.com/AndrewBurian/powermux,Go,,,
GO-2022-0978,Protection bypass in github.com/open-policy-agent/opa,"Open Policy Agent (OPA) is an open source, general-purpose policy engine. The Rego compiler provides a (deprecated) `WithUnsafeBuiltins` function, which allows users to provide a set of built-in functions that should be deemed unsafe and rejected by the compiler if encountered in the policy compilation stage.

A bypass of this protection is possible when using the `with` keyword to mock a built-in function that isn't taken into account by `WithUnsafeBuiltins`.",0001-01-01T00:00:00Z,2022-09-13T17:40:16Z,github.com/open-policy-agent/opa,Go,,,
GO-2023-1713,Path traversal in github.com/sjqzhang/go-fastdfs,An attacker can craft a remote request to upload a file to `/group1/upload` that uses path traversal to instead write the file contents to an attacker controlled path on the server.,0001-01-01T00:00:00Z,0001-01-01T00:00:00Z,github.com/sjqzhang/go-fastdfs,Go,,,
GO-2023-1904,Collision of hash values in github.com/bnb-chain/tss-lib,Collision of hash values in github.com/bnb-chain/tss-lib.,0001-01-01T00:00:00Z,0001-01-01T00:00:00Z,github.com/bnb-chain/tss-lib,Go,,,
GO-2022-0569,Path traversal in github.com/beego/beego and beego/v2,The leafInfo.match() function uses path.join() to deal with wildcard values which can lead to cross directory risk.,0001-01-01T00:00:00Z,2022-08-23T13:24:17Z,github.com/astaxie/beego,Go,,,
GO-2022-1071,Denial of service in flux controllers in github.com/fluxcd modules,"Flux controllers are vulnerable to a denial of service attack.

Users that have permissions to change Flux's objects, either through a Flux source or directly within a cluster, can provide invalid data to fields `.spec.interval` or `.spec.timeout` (and structured variations of these fields), causing the entire object type to stop being processed.

The issue has two root causes: a) the Kubernetes type `metav1.Duration` is not fully compatible with the Go type `time.Duration` as explained in https://github.com/kubernetes/apimachinery/issues/131, and b) a lack of validation within Flux to restrict allowed values.",0001-01-01T00:00:00Z,0001-01-01T00:00:00Z,github.com/fluxcd/helm-controller/api,Go,,,
GO-2021-0159,Request smuggling due to improper header parsing in net/http,"HTTP headers were not properly parsed, which allows remote attackers to conduct HTTP request smuggling attacks via a request that contains Content-Length and Transfer-Encoding header fields.",0001-01-01T00:00:00Z,2022-01-05T21:39:14Z,stdlib,Go,,,
GO-2022-0273,Panic due to crafted inputs in archive/zip,"The NewReader and OpenReader functions in archive/zip can cause a panic or an unrecoverable fatal error when reading an archive that claims to contain a large number of files, regardless of its actual size. This is caused by an incomplete fix for CVE-2021-33196.",0001-01-01T00:00:00Z,2022-05-18T18:23:31Z,stdlib,Go,,,
GO-2022-1095,Unsanitized NUL in environment variables on Windows in syscall and os/exec,"Due to unsanitized NUL values, attackers may be able to maliciously set environment variables on Windows.

In syscall.StartProcess and os/exec.Cmd, invalid environment variable values containing NUL values are not properly checked for. A malicious environment variable value can exploit this behavior to set a value for a different environment variable. For example, the environment variable string ""A=B\x00C=D"" sets the variables ""A=B"" and ""C=D"".",0001-01-01T00:00:00Z,0001-01-01T00:00:00Z,stdlib,Go,,,
GO-2023-1826,Signature validation bypass in github.com/moov-io/signedxml,"Signature validation canonicalizes the input XML document before validating the signature. Parsing the uncanonicalized and canonicalized forms can produce different results. An attacker can exploit this variation to bypass signature validation.

Users of signature validation must only parse the canonicalized form of the validated document. The Validator.Validate function does not return the canonical form, and cannot be used safely. Users should only use the Validator.ValidateReferences function and only parse the canonical form which it returns.

The Validator.Validate function was removed in github.com/moov-io/signedxml v1.1.0.",0001-01-01T00:00:00Z,0001-01-01T00:00:00Z,github.com/moov-io/signedxml,Go,,,
GO-2023-2133,Authorization bypass in github.com/nats-io/nats-server/v2,"Without any authorization rules in the nats-server, users can connect without authentication.

Before nats-server 2.2.0, all authentication and authorization rules for a nats-server lived in an ""authorization"" block, defining users. With nats-server 2.2.0 all users live inside accounts. When using the authorization block, whose syntax predates this, those users will be placed into the implicit global account, ""$G"". Users inside accounts go into the newer ""accounts"" block.

If an ""accounts"" block is defined, in simple deployment scenarios this is often used only to enable client access to the system account. When the only account added is the system account ""$SYS"", the nats-server would create an implicit user in ""$G"" and set it as the `no_auth_user` account, enabling the same ""without authentication"" logic as without any rules.

This preserved the ability to connect simply, and then add one authenticated login for system access.

But with an ""authorization"" block, this is wrong. Users exist in the global account, with login rules. And in simple testing, they might still connect fine without administrators seeing that authentication has been disabled.

In the fixed versions, using an ""authorization"" block will inhibit the implicit creation of a ""$G"" user and setting it as the `no_auth_user` target. In unfixed versions, just creating a second account, with no users, will also inhibit this behavior.",0001-01-01T00:00:00Z,0001-01-01T00:00:00Z,github.com/nats-io/nats-server/v2,Go,,,
GO-2022-0402,Panic in NATS JWT decoding in github.com/nats-io/jwt,A malicious account can create and sign a User JWT which causes a panic when decoded by the NATS JWT library.,0001-01-01T00:00:00Z,2022-07-01T20:10:43Z,github.com/nats-io/jwt,Go,,,
GO-2022-1004,Improper handling of keys in github.com/theupdateframework/go-tuf,An attacker with the ability to insert public keys into a TUF repository can cause clients to accept a staged change that has not been signed by the correct threshold of signatures.,0001-01-01T00:00:00Z,0001-01-01T00:00:00Z,github.com/theupdateframework/go-tuf,Go,,,
GO-2022-0603,Panic in gopkg.in/yaml.v3,An issue in the Unmarshal function can cause a program to panic when attempting to deserialize invalid input.,0001-01-01T00:00:00Z,2022-08-22T18:00:47Z,gopkg.in/yaml.v3,Go,,,
GO-2023-1573,Memory exhaustion via OCI image importer in github.com/containerd/containerd,"When importing an OCI image, there was no limit on the number of bytes read from the io.Reader passed into ImportIndex. A large number of bytes could be read from this and could cause a denial of service.",0001-01-01T00:00:00Z,0001-01-01T00:00:00Z,github.com/containerd/containerd,Go,,,
GO-2023-1872,Denial of service in github.com/openfga/openfga,OpenFGA is vulnerable to a denial of service attack when certain Check and ListObjects calls are executed against authorization models that contain circular relationship definitions.,0001-01-01T00:00:00Z,0001-01-01T00:00:00Z,github.com/openfga/openfga,Go,,,
GO-2023-1882,Deadlock in github.com/cometbft/cometbft/consensus,"An internal modification to the way PeerState is serialized to JSON introduced a deadlock when the new function MarshalJSON is called.

This function can be called in two ways. The first is via logs, by setting the consensus logging module to ""debug"" level (which should not happen in production), and setting the log output format to JSON. The second is via RPC dump_consensus_state.",0001-01-01T00:00:00Z,0001-01-01T00:00:00Z,github.com/cometbft/cometbft,Go,,,
GO-2023-1269,Panic in encoding in github.com/ipld/go-ipld-prime,"Encoding data using the 'json' codec which contains a 'Bytes' type Node will cause the encoder to panic. The decoder is not impacted. If the codec is used to encode user supplied data, this may be used as a vector for a denial of service attack.",0001-01-01T00:00:00Z,0001-01-01T00:00:00Z,github.com/ipld/go-ipld-prime,Go,,,
GO-2023-2042,Arbitrary code execution via go.mod toolchain directive in cmd/go,"The go.mod toolchain directive, introduced in Go 1.21, can be leveraged to execute scripts and binaries relative to the root of the module when the ""go"" command was executed within the module. This applies to modules downloaded using the ""go"" command from the module proxy, as well as modules downloaded directly using VCS software.",0001-01-01T00:00:00Z,0001-01-01T00:00:00Z,toolchain,Go,,,
GO-2023-1534,Panic during unmarshal of Hello Verify Request in github.com/pion/dtls/v2,"Unmarshalling a Hello Verify request can panic, which could allow a denial of service.",0001-01-01T00:00:00Z,0001-01-01T00:00:00Z,github.com/pion/dtls/v2,Go,,,
GO-2020-0042,Arbitrary File Write via Archive Extraction (Zip Slip) in github.com/sassoftware/go-rpmutils,"Due to improper path sanitization, RPMs containing relative file paths can cause files to be written (or overwritten) outside of the target directory.",0001-01-01T00:00:00Z,2021-04-14T20:04:52Z,github.com/sassoftware/go-rpmutils,Go,,,
GO-2023-1859,Padding oracle vulnerability in github.com/lestrrat-go/jwx,AES-CBC decryption is vulnerable to a timing attack which may permit an attacker to recover the plaintext of JWE data.,0001-01-01T00:00:00Z,0001-01-01T00:00:00Z,github.com/lestrrat-go/jwx,Go,,,
GO-2023-2113,Memory exhaustion in github.com/open-telemetry/opentelemetry-go-contrib,Memory exhaustion in github.com/open-telemetry/opentelemetry-go-contrib,0001-01-01T00:00:00Z,0001-01-01T00:00:00Z,go.opentelemetry.io/contrib/instrumentation/github.com/emicklei/go-restful/otelrestful,Go,,,
GO-2022-0288,Unbounded memory growth in net/http and golang.org/x/net/http2,An attacker can cause unbounded memory growth in servers accepting HTTP/2 requests.,0001-01-01T00:00:00Z,2022-07-15T23:08:33Z,stdlib,Go,,,
GO-2022-0646,Use of risky cryptographic algorithm in github.com/aws/aws-sdk-go,"The Go AWS S3 Crypto SDK contains vulnerabilities that can permit an attacker with write access to a bucket to decrypt files in that bucket.

Files encrypted by the V1 EncryptionClient using either the AES-CBC content cipher or the KMS key wrap algorithm are vulnerable. Users should migrate to the V1 EncryptionClientV2 API, which will not create vulnerable files. Old files will remain vulnerable until re-encrypted with the new client.",0001-01-01T00:00:00Z,2022-02-11T23:26:26Z,github.com/aws/aws-sdk-go,Go,,,
GO-2021-0110,Token reuse in github.com/ory/fosite,"Uniqueness of JWT IDs (jti) are not checked, allowing the JWT to be replayed.",0001-01-01T00:00:00Z,2021-07-28T18:08:05Z,github.com/ory/fosite,Go,,,
GO-2022-0460,Infinite loop in github.com/pion/dtls/v2,An attacker can send packets that send the DTLS server or client into an infinite loop.,0001-01-01T00:00:00Z,2022-07-01T20:07:34Z,github.com/pion/dtls/v2,Go,,,
GO-2023-1571,Denial of service via crafted HTTP/2 stream in net/http and golang.org/x/net,"A maliciously crafted HTTP/2 stream could cause excessive CPU consumption in the HPACK decoder, sufficient to cause a denial of service from a small number of small requests.",0001-01-01T00:00:00Z,0001-01-01T00:00:00Z,stdlib,Go,,,
GO-2022-0438,Exposure of sensitive information via log file in github.com/hashicorp/go-getter,"The getter package can write SSH credentials to its logfile, exposing credentials to local users able to read the logfile.",0001-01-01T00:00:00Z,2022-07-01T20:07:52Z,github.com/hashicorp/go-getter,Go,,,
GO-2022-1201,Timing attack in github.com/openshift/osin,"Client secret checks are vulnerable to timing attacks, which could permit an attacker to determine client secrets.",0001-01-01T00:00:00Z,0001-01-01T00:00:00Z,github.com/openshift/osin,Go,,,
GO-2022-0965,Unbounded recursion in JSON parsing in k8s.io/apimachinery,Unbounded recursion in JSON parsing allows malicious JSON input to cause excessive memory consumption or panics.,0001-01-01T00:00:00Z,2022-09-02T21:12:51Z,k8s.io/apimachinery,Go,,,
GO-2021-0317,Uncontrolled memory consumption in math/big,Rat.SetString had an overflow issue that can lead to uncontrolled memory consumption.,0001-01-01T00:00:00Z,2022-05-23T22:15:42Z,stdlib,Go,,,
GO-2023-2101,Incorrect exponentiation results in github.com/consensys/gnark-crypto,Incorrect exponentiation results in github.com/consensys/gnark-crypto,0001-01-01T00:00:00Z,0001-01-01T00:00:00Z,github.com/consensys/gnark-crypto,Go,,,
GO-2023-1611,Path traversal in github.com/gookit/goutil,fsutil.Unzip is vulnerable to path traversal attacks due to improper validation of paths.,0001-01-01T00:00:00Z,0001-01-01T00:00:00Z,github.com/gookit/goutil,Go,,,
GO-2022-0318,Incorrect access control in the go command in cmd/go/internal/modfetch,"Incorrect access control is possible in the go command.

The go command can misinterpret branch names that falsely appear to be version tags. This can lead to incorrect access control if an actor is authorized to create branches but not tags.",0001-01-01T00:00:00Z,2022-08-01T22:20:42Z,toolchain,Go,,,
GO-2022-0244,Insufficient randomness in UUIDs in github.com/satori/go.uuid,"Random data used to create UUIDs can contain zeros, resulting in predictable UUIDs and possible collisions.",0001-01-01T00:00:00Z,2022-07-15T23:06:26Z,github.com/satori/go.uuid,Go,,,
GO-2021-0105,Consensus flaw in github.com/ethereum/go-ethereum,"Due to an incorrect state calculation, a specific set of transactions could cause a consensus disagreement, causing users of this package to reject a canonical chain.",0001-01-01T00:00:00Z,2021-07-28T18:08:05Z,github.com/ethereum/go-ethereum,Go,,,
GO-2022-0248,Directory traversal in manifest path extraction in github.com/cloudflare/cfrpki,"Manifest path extraction is vulnerable to directory traversal attacks.

The ExtractPathManifest function permits file paths containing relative directory components (""..""), permitting files to reference arbitrary locations on the filesystem.",0001-01-01T00:00:00Z,2022-07-15T23:07:18Z,github.com/cloudflare/cfrpki,Go,,,
GO-2023-1559,Denial of service via HAMT decoding panic in github.com/ipfs/go-unixfsnode,"Trying to read malformed HAMT sharded directories can cause panics and virtual memory leaks. If you are reading untrusted user input, an attacker can then trigger a panic.

This is caused by a bogus fanout parameter in the HAMT directory nodes.

There are no known workarounds (users are advised to upgrade).",0001-01-01T00:00:00Z,0001-01-01T00:00:00Z,github.com/ipfs/go-unixfsnode,Go,,,
GO-2023-1623,Out-of-memory panic in github.com/crossplane/crossplane-runtime,"An out of memory panic vulnerability exists in the crossplane-runtime libraries.

Applications that use the Paved type's SetValue method with user-provided input that is not properly validated might use excessive amounts of memory and cause an out of memory panic.

In the fieldpath package, the Paved.SetValue method sets a value on the Paved object according to the provided path, without any validation. This allows setting values in slices at any provided index, which grows the target array up to the requested index. The index is currently capped at max uint32 (4294967295), a large value. If callers do not validate paths' indexes on their own, this could allow users to consume arbitrary amounts of memory.

Applications that do not use the Paved type's SetValue method are not affected.

Users unable to upgrade can work around this issue by parsing and validating the path before passing it to the SetValue method of the Paved type, constraining the index size as deemed appropriate.",0001-01-01T00:00:00Z,0001-01-01T00:00:00Z,github.com/crossplane/crossplane-runtime,Go,,,
GO-2020-0047,Weak hash (SHA-1) in github.com/RobotsAndPencils/go-saml,"XML Digital Signatures generated and validated using this package use SHA-1, which may allow an attacker to craft inputs which cause hash collisions depending on their control over the input.",0001-01-01T00:00:00Z,2021-04-14T20:04:52Z,github.com/RobotsAndPencils/go-saml,Go,,,
GO-2021-0063,Panic in github.com/ethereum/go-ethereum,"Due to a nil pointer dereference, a maliciously crafted RPC message can cause a panic. If handling RPC messages from untrusted clients, this may be used as a denial of service vector.",0001-01-01T00:00:00Z,2021-04-14T20:04:52Z,github.com/ethereum/go-ethereum,Go,,,
GO-2020-0022,Out-of-bounds write in github.com/cloudflare/golz4,"LZ4 bindings use a deprecated C API that is vulnerable to memory corruption, which could lead to arbitrary code execution if called with untrusted user input.",0001-01-01T00:00:00Z,2021-04-14T20:04:52Z,github.com/cloudflare/golz4,Go,,,
GO-2023-1765,Leaked shared secret and weak blinding in github.com/cloudflare/circl,"When sampling randomness for a shared secret, the implementation of Kyber and FrodoKEM, did not check whether crypto/rand.Read() returns an error. In rare deployment cases (error thrown by the Read() function), this could lead to a predictable shared secret.

The tkn20 and blindrsa components did not check whether enough randomness was returned from the user provided randomness source. Typically the user provides crypto/rand.Reader, which in the vast majority of cases will always return the right number random bytes. In the cases where it does not, or the user provides a source that does not, the blinding for blindrsa is weak and integrity of the plaintext is not ensured in tkn20.",0001-01-01T00:00:00Z,0001-01-01T00:00:00Z,github.com/cloudflare/circl,Go,,,
GO-2023-1566,Cross site scripting in github.com/usememos/memos,A malicious actor can introduce links starting with a `javascript:` scheme due to insufficient checks on external resources. This can be used as a part of Cross-site Scripting (XSS) attack.,0001-01-01T00:00:00Z,0001-01-01T00:00:00Z,github.com/usememos/memos,Go,,,
GO-2020-0038,Improper authentication in github.com/pion/dtls,"Due to improper verification of packets, unencrypted packets containing application data are accepted after the initial handshake. This allows an attacker to inject arbitrary data which the client/server believes was encrypted, despite not knowing the session key.",0001-01-01T00:00:00Z,2021-04-14T20:04:52Z,github.com/pion/dtls,Go,,,
GO-2023-1548,Repository access credential leak in github.com/argoproj/argo-cd/v2,"Argo CD has an output sanitization bug which leaks repository access credentials in error messages.

These error messages are visible to the user, and they are logged. The error message is visible when a user attempts to create or update an Application via the Argo CD API (and therefor the UI or CLI).

The user must have `applications, create` or `applications, update` RBAC access to reach the code which may produce the error. The user is not guaranteed to be able to trigger the error message. They may attempt to spam the API with requests to trigger a rate limit error from the upstream repository.

If the user has `repositories, update` access, they may edit an existing repository to introduce a URL typo or otherwise force an error message.",0001-01-01T00:00:00Z,0001-01-01T00:00:00Z,github.com/argoproj/argo-cd/v2,Go,,,
GO-2022-0187,Incorrect computation for P-256 curves in crypto/elliptic,"The ScalarMult implementation of curve P-256 for amd64 architectures generates incorrect results for certain specific input points. An adaptive attack can progressively extract the scalar input to ScalarMult by submitting crafted points and observing failures to derive correct output. This leads to a full key recovery attack against static ECDH, as used in popular JWT libraries.",0001-01-01T00:00:00Z,2022-07-01T20:11:15Z,stdlib,Go,,,
GO-2023-1733,Timing attack from non-constant time scalar arithmetic in github.com/bnb-chain/tss-lib,Timing attack from non-constant time scalar arithmetic in github.com/bnb-chain/tss-lib.,0001-01-01T00:00:00Z,0001-01-01T00:00:00Z,github.com/bnb-chain/tss-lib,Go,,,
GO-2021-0235,Incorrect operations on the P-224 curve in crypto/elliptic,"The P224() Curve implementation can in rare circumstances generate incorrect outputs, including returning invalid points from ScalarMult.",0001-01-01T00:00:00Z,2022-02-17T17:34:14Z,stdlib,Go,,,
GO-2022-0380,Incorrect handling of credential expiry in github.com/nats-io/jwt,"The AccountClaims.IsRevoked and Export.IsRevoked functions improperly validate expired credentials using the current system time rather than the issue time of the JWT to be tested.

These functions cannot be used properly. Newer versions of the jwt package provide an IsClaimRevoked method which performs correct validation. In these versions, the IsRevoked method always return true.",0001-01-01T00:00:00Z,2022-07-15T23:29:36Z,github.com/nats-io/jwt,Go,,,
GO-2023-1792,Insecure wildcard CORS policy in github.com/rs/cors,"The CORS handler actively converts a wildcard CORS policy into reflecting an arbitrary Origin header value, which is incompatible with the CORS security design, and could lead to CORS misconfiguration security problems.",0001-01-01T00:00:00Z,0001-01-01T00:00:00Z,github.com/rs/cors,Go,,,
GO-2022-0531,Session tickets lack random ticket_age_add in crypto/tls,"An attacker can correlate a resumed TLS session with a previous connection.

Session tickets generated by crypto/tls do not contain a randomly generated ticket_age_add, which allows an attacker that can observe TLS handshakes to correlate successive connections by comparing ticket ages during session resumption.",0001-01-01T00:00:00Z,2022-07-28T17:24:57Z,stdlib,Go,,,
GO-2021-0087,Race condition in github.com/opencontainers/runc,"A race while mounting volumes allows a possible symlink-exchange attack, allowing a user whom can start multiple containers with custom volume mount configurations to escape the container.",0001-01-01T00:00:00Z,2021-04-14T20:04:52Z,github.com/opencontainers/runc,Go,,,
GO-2022-0212,Request smuggling due to accepting invalid headers in net/http,"net/http (through net/textproto) used to accept and normalize invalid HTTP/1.1 headers with a space before the colon, in violation of RFC 7230.

If a Go server is used behind an uncommon reverse proxy that accepts and forwards but doesn't normalize such invalid headers, the reverse proxy and the server can interpret the headers differently. This can lead to filter bypasses or request smuggling, the latter if requests from separate clients are multiplexed onto the same upstream connection by the proxy. Such invalid headers are now rejected by Go servers, and passed without normalization to Go client applications.",0001-01-01T00:00:00Z,2022-05-23T22:46:20Z,stdlib,Go,,,
GO-2021-0058,Signature validation bypass due to XML processing error in github.com/crewjam/saml,"Due to the behavior of encoding/xml, a crafted XML document may cause XML Digital Signature validation to be entirely bypassed, causing an unsigned document to appear signed.",0001-01-01T00:00:00Z,2021-04-14T20:04:52Z,github.com/crewjam/saml,Go,,,
GO-2021-0098,Arbitrary code execution on Windows in github.com/git-lfs/git-lfs,Due to the standard library behavior of exec.LookPath on Windows a number of methods may result in arbitrary code execution when cloning or operating on untrusted Git repositories.,0001-01-01T00:00:00Z,2021-04-14T20:04:52Z,github.com/git-lfs/git-lfs,Go,,,
GO-2022-1155,Panic in github.com/ipfs/go-merkledag,"A ProtoNode may be modified in such a way as to cause various encode errors which will trigger a panic on common method calls that don't allow for error returns.

Additionally, use of the ProtoNode.SetCidBuilder() method to set non-functioning CidBuilder (such as one that refers to a multihash where an implementation of that hash function is not available) may cause the same methods to panic as a new CID is required but cannot be created.",0001-01-01T00:00:00Z,0001-01-01T00:00:00Z,github.com/ipfs/go-merkledag,Go,,,
GO-2022-0563,Cross-site request forgery in github.com/filebrowser/filebrowser/v2,A Cross-Site Request Forgery vulnerability exists in Filebrowser that allows attackers to create a backdoor user with admin privilege and get access to the filesystem via a malicious HTML webpage that is sent to the victim.,0001-01-01T00:00:00Z,2022-02-05T00:00:31Z,github.com/filebrowser/filebrowser/v2,Go,,,
GO-2022-0523,Stack exhaustion when unmarshaling certain documents in encoding/xml,Unmarshaling an XML document into a Go struct which has a nested field that uses the 'any' field tag can panic due to stack exhaustion.,0001-01-01T00:00:00Z,2022-07-20T20:52:06Z,stdlib,Go,,,
GO-2022-0417,Incorrect default permissions in github.com/containers/buildah,"Containers are created with non-empty inheritable Linux process capabilities, permitting programs with inheritable file capabilities to elevate those capabilities to the permitted set during execve(2).

This bug does not affect the container security sandbox, as the inheritable set never contains more capabilities than are included in the container's bounding set.",0001-01-01T00:00:00Z,2022-07-01T20:08:10Z,github.com/containers/buildah,Go,,,
GO-2022-0477,Indefinite hang with large buffers on Windows in crypto/rand,"On Windows, rand.Read will hang indefinitely if passed a buffer larger than 1 << 32 - 1 bytes.",0001-01-01T00:00:00Z,2022-06-09T01:43:37Z,stdlib,Go,,,
GO-2023-1602,Denial of service via deflate decompression bomb in github.com/russellhaering/gosaml2,"A bug in SAML authentication library can result in Denial of Service attacks.

Attackers can craft a `deflate`-compressed request which will consume significantly more memory during processing than the size of the original request. This may eventually lead to memory exhaustion and the process being killed.",0001-01-01T00:00:00Z,0001-01-01T00:00:00Z,github.com/russellhaering/gosaml2,Go,,,
GO-2023-2114,Cross-site scripting via missing binding syntax validation in github.com/crewjam/saml,"The package does not validate the ACS Location URI according to the SAML binding being parsed. If abused, this flaw allows attackers to register malicious Service Providers at the IdP and inject Javascript in the ACS endpoint definition, achieving Cross-Site-Scripting (XSS) in the IdP context during the redirection at the end of a SAML SSO Flow. Consequently, an attacker may perform any authenticated action as the victim once the victim's browser loads the SAML IdP initiated SSO link for the malicious service provider.",0001-01-01T00:00:00Z,0001-01-01T00:00:00Z,github.com/crewjam/saml,Go,,,
GO-2022-0980,Exposure of Vault secrets via error messages in github.com/hashicorp/consul-template,"The text of errors returned by Template.Execute can contain Vault secrets, potentially revealing these secrets in logs or error reports.",0001-01-01T00:00:00Z,0001-01-01T00:00:00Z,github.com/hashicorp/consul-template,Go,,,
GO-2021-0090,Denial of service in github.com/tendermint/tendermint,"Proposed commits may contain signatures for blocks not contained within the commit. Instead of skipping these signatures, they cause failure during verification. A malicious proposer can use this to force consensus failures.",0001-01-01T00:00:00Z,2021-04-14T20:04:52Z,github.com/tendermint/tendermint,Go,,,
GO-2020-0025,Path traversal in code.cloudfoundry.org/archiver,"Due to improper path sanitization, archives containing relative file paths can cause files to be written (or overwritten) outside of the target directory.",0001-01-01T00:00:00Z,2021-04-14T20:04:52Z,code.cloudfoundry.org/archiver,Go,,,
GO-2023-1621,Incorrect calculation on P256 curves in crypto/internal/nistec,"The ScalarMult and ScalarBaseMult methods of the P256 Curve may return an incorrect result if called with some specific unreduced scalars (a scalar larger than the order of the curve).

This does not impact usages of crypto/ecdsa or crypto/ecdh.",0001-01-01T00:00:00Z,0001-01-01T00:00:00Z,stdlib,Go,,,
GO-2021-0242,Panic on inputs with large exponents in math/big,Rat.SetString and Rat.UnmarshalText may cause a panic or an unrecoverable fatal error if passed inputs with very large exponents.,0001-01-01T00:00:00Z,2022-02-17T17:33:07Z,stdlib,Go,,,
GO-2021-0072,Uncontrolled resource allocation in github.com/docker/distribution,"Various storage methods do not impose limits on how much content is accepted from user requests, allowing a malicious user to force the caller to allocate an arbitrary amount of memory.",0001-01-01T00:00:00Z,2021-04-14T20:04:52Z,github.com/docker/distribution,Go,,,
GO-2020-0023,Timing side-channel in github.com/robbert229/jwt,"Token validation methods are susceptible to a timing side-channel during HMAC comparison. With a large enough number of requests over a low latency connection, an attacker may use this to determine the expected HMAC.",0001-01-01T00:00:00Z,2021-04-14T20:04:52Z,github.com/robbert229/jwt,Go,,,
GO-2022-0300,Panic via malicious inputs in github.com/graph-gophers/graphql-go,"Malicious inputs can cause a panic.

A maliciously crafted input can cause a stack overflow and panic. Any user with access to the GraphQL can send such a query.

This issue only occurs when using the graphql.MaxDepth schema option (which is highly recommended in most cases).",0001-01-01T00:00:00Z,2022-07-15T23:10:20Z,github.com/graph-gophers/graphql-go,Go,,,
GO-2022-0969,Denial of service in net/http and golang.org/x/net/http2,HTTP/2 server connections can hang forever waiting for a clean shutdown that was preempted by a fatal error. This condition can be exploited by a malicious client to cause a denial of service.,0001-01-01T00:00:00Z,2022-09-12T20:23:06Z,stdlib,Go,,,
GO-2023-1572,Denial of service via crafted TIFF image in golang.org/x/image/tiff,An attacker can craft a malformed TIFF image which will consume a significant amount of memory when passed to DecodeConfig. This could lead to a denial of service.,0001-01-01T00:00:00Z,0001-01-01T00:00:00Z,golang.org/x/image,Go,,,
GO-2022-0962,Denial of service through string value parsing in helm.sh/helm/v3,"Applications that use the strvals package in the Helm SDK to parse user supplied input can suffer a Denial of Service when that input causes a panic that cannot be recovered from.

The strvals package contains a parser that turns strings into Go structures. For example, the Helm client has command line flags like --set, --set-string, and others that enable the user to pass in strings that are merged into the values. The strvals package converts these strings into structures Go can work with. Some string inputs can cause array data structures to be created causing an out of memory panic.

The Helm Client will panic with input to --set, --set-string, and other value setting flags that causes an out of memory panic. Helm is not a long running service so the panic will not affect future uses of the Helm client.",0001-01-01T00:00:00Z,2022-09-02T15:19:52Z,helm.sh/helm/v3,Go,,,
GO-2022-1039,Memory exhaustion when compiling regular expressions in regexp/syntax,"Programs which compile regular expressions from untrusted sources may be vulnerable to memory exhaustion or denial of service.

The parsed regexp representation is linear in the size of the input, but in some cases the constant factor can be as high as 40,000, making relatively small regexps consume much larger amounts of memory.

After fix, each regexp being parsed is limited to a 256 MB memory footprint. Regular expressions whose representation would use more space than that are rejected. Normal use of regular expressions is unaffected.",0001-01-01T00:00:00Z,0001-01-01T00:00:00Z,stdlib,Go,,,
GO-2023-1497,Leaked user credentials in github.com/sylabs/scs-library-client,"When the scs-library-client is used to pull a container image, with authentication, the HTTP Authorization header sent by the client to the library service may be incorrectly leaked to an S3 backing storage provider.",0001-01-01T00:00:00Z,0001-01-01T00:00:00Z,github.com/sylabs/scs-library-client,Go,,,
GO-2022-0476,Arbitrary code execution via the go command with cgo in cmd/go,"The go command may execute arbitrary code at build time when cgo is in use. This may occur when running go get on a malicious package, or any other command that builds untrusted code.

This can be caused by malicious gcc flags specified via a cgo directive.",0001-01-01T00:00:00Z,2022-07-28T17:24:43Z,toolchain,Go,,,
GO-2021-0228,Path traversal in github.com/unknwon/cae,"The ExtractTo function doesn't securely escape file paths in zip archives which include leading or non-leading "".."". This allows an attacker to add or replace files system-wide.",0001-01-01T00:00:00Z,2022-01-14T17:30:28Z,github.com/unknwon/cae,Go,,,
GO-2021-0238,Infinite loop when parsing inputs in golang.org/x/net/html,An attacker can craft an input to ParseFragment that causes it to enter an infinite loop and never return.,0001-01-01T00:00:00Z,2022-02-17T17:33:43Z,golang.org/x/net,Go,,,
GO-2022-0979,Incorrect DNSSEC validation in github.com/peterzen/goresolver,"DNSSEC validation is not performed correctly. An attacker can cause this package to report successful validation for invalid, attacker-controlled records.

The owner name of RRSIG RRs is not validated, permitting an attacker to present the RRSIG for an attacker-controlled domain in a response for any other domain.",0001-01-01T00:00:00Z,0001-01-01T00:00:00Z,github.com/peterzen/goresolver,Go,,,
GO-2022-1114,ZipSlip when unzipping files in github.com/duke-git/lancet,A ZipSlip vulnerability exists when using the fileutil package to unzip files.,0001-01-01T00:00:00Z,0001-01-01T00:00:00Z,github.com/duke-git/lancet,Go,,,
GO-2023-2095,Arbitrary code execution during build via line directives in cmd/go,"Line directives (""//line"") can be used to bypass the restrictions on ""//go:cgo_"" directives, allowing blocked linker and compiler flags to be passed during compilation. This can result in unexpected execution of arbitrary code when running ""go build"". The line directive requires the absolute path of the file in which the directive lives, which makes exploiting this issue significantly more complex.",0001-01-01T00:00:00Z,0001-01-01T00:00:00Z,toolchain,Go,,,
GO-2023-1832,Verification bypass in github.com/notaryproject/notation-go,An attacker who controls or compromises a registry can lead a user to verify the wrong artifact.,0001-01-01T00:00:00Z,0001-01-01T00:00:00Z,github.com/notaryproject/notation-go,Go,,,
GO-2023-2045,Memory exhaustion in QUIC connection handling in crypto/tls,"QUIC connections do not set an upper bound on the amount of data buffered when reading post-handshake messages, allowing a malicious QUIC connection to cause unbounded memory growth.

With fix, connections now consistently reject messages larger than 65KiB in size.",0001-01-01T00:00:00Z,0001-01-01T00:00:00Z,stdlib,Go,,,
GO-2020-0007,Improper input validation in github.com/seccomp/libseccomp-golang,"Filters containing rules with multiple syscall arguments are improperly constructed, such that all arguments are required to match rather than any of the arguments (AND is used rather than OR). These filters can be bypassed by only specifying a subset of the arguments due to this behavior.",0001-01-01T00:00:00Z,2021-04-14T20:04:52Z,github.com/seccomp/libseccomp-golang,Go,,,
GO-2022-0532,Empty Cmd.Path can trigger unintended binary in os/exec on Windows,"On Windows, executing Cmd.Run, Cmd.Start, Cmd.Output, or Cmd.CombinedOutput when Cmd.Path is unset will unintentionally trigger execution of any binaries in the working directory named either ""..com"" or ""..exe"".",0001-01-01T00:00:00Z,2022-07-26T21:41:20Z,stdlib,Go,,,
GO-2021-0059,Panic due to improper input validation in github.com/tidwall/gjson,"Due to improper bounds checking, maliciously crafted JSON objects can cause an out-of-bounds panic. If parsing user input, this may be used as a denial of service vector.",0001-01-01T00:00:00Z,2021-04-14T20:04:52Z,github.com/tidwall/gjson,Go,,,
GO-2023-1268,Authentication failure in mellium.im/sasl,"An issue was discovered in Mellium mellium.im/sasl before 0.3.1. When performing SCRAM-based SASL authentication, if the remote end advertises support for channel binding, no random nonce is generated (instead, the nonce is empty). This causes authentication to fail in the best case, but (if paired with a remote end that does not validate the length of the nonce) could lead to insufficient randomness being used during authentication.",0001-01-01T00:00:00Z,0001-01-01T00:00:00Z,mellium.im/sasl,Go,,,
GO-2020-0049,Improper input validation in github.com/justinas/nosurf,"Due to improper validation of caller input, validation is silently disabled if the provided expected token is malformed, causing any user supplied token to be considered valid.",0001-01-01T00:00:00Z,2021-04-14T20:04:52Z,github.com/justinas/nosurf,Go,,,
GO-2023-1842,Improper sanitization of LDFLAGS in go command with cgo in cmd/go,"The go command may execute arbitrary code at build time when using cgo. This may occur when running ""go get"" on a malicious module, or when running any other command which builds untrusted code. This is can by triggered by linker flags, specified via a ""#cgo LDFLAGS"" directive.

Flags containing embedded spaces are mishandled, allowing disallowed flags to be smuggled through the LDFLAGS sanitization by including them in the argument of another flag. This only affects usage of the gccgo compiler.",0001-01-01T00:00:00Z,0001-01-01T00:00:00Z,toolchain,Go,,,
GO-2022-0444,Version rollback attack in github.com/theupdateframework/go-tuf,"The TUF client is vulnerable to rollback attacks, in which an attacker causes a client to install software older than the software the client previously knew to be available.",0001-01-01T00:00:00Z,2022-07-01T20:07:44Z,github.com/theupdateframework/go-tuf,Go,,,
GO-2022-1188,Uncontrolled memory allocation in code.sajari.com/docconv,An attacker can remotely supply a specially crafted input that causes uncontrolled memory allocation.,0001-01-01T00:00:00Z,0001-01-01T00:00:00Z,code.sajari.com/docconv,Go,,,
GO-2022-0425,Weak encryption and denial of service in github.com/flynn/noise,"The Noise protocol implementation suffers from weakened cryptographic security after encrypting 2^64 messages, and a potential denial of service attack.

After 2^64 (~18.4 quintillion) messages are encrypted with the Encrypt function, the nonce counter will wrap around, causing multiple messages to be encrypted with the same key and nonce.

In a separate issue, the Decrypt function increments the nonce state even when it fails to decrypt a message. If an attacker can provide an invalid input to the Decrypt function, this will cause the nonce state to desynchronize between the peers, resulting in a failure to encrypt all subsequent messages.",0001-01-01T00:00:00Z,2022-02-15T01:57:18Z,github.com/flynn/noise,Go,,,
GO-2020-0045,Cryptographically weak random number generation in github.com/dinever/golf,"CSRF tokens are generated using math/rand, which is not a cryptographically secure random number generator, allowing an attacker to predict values and bypass CSRF protections with relatively few requests.",0001-01-01T00:00:00Z,2021-04-14T20:04:52Z,github.com/dinever/golf,Go,,,
GO-2022-0254,Consensus flaw during block processing in github.com/ethereum/go-ethereum,"A vulnerability in the Geth EVM can cause a node to reject the canonical chain.

A memory-corruption bug within the EVM can cause a consensus error, where vulnerable nodes obtain a different stateRoot when processing a maliciously crafted transaction. This, in turn, would lead to the chain being split in two forks.",0001-01-01T00:00:00Z,2022-07-15T23:07:56Z,github.com/ethereum/go-ethereum,Go,,,
GO-2023-1841,Improper sanitization of LDFLAGS in go command with cgo in cmd/go,"The go command may execute arbitrary code at build time when using cgo. This may occur when running ""go get"" on a malicious module, or when running any other command which builds untrusted code. This is can by triggered by linker flags, specified via a ""#cgo LDFLAGS"" directive.

The arguments for a number of flags which are non-optional are incorrectly considered optional, allowing disallowed flags to be smuggled through the LDFLAGS sanitization. This affects usage of both the gc and gccgo compilers.",0001-01-01T00:00:00Z,0001-01-01T00:00:00Z,toolchain,Go,,,
GO-2020-0033,Path Traversal in aahframe.work,"Due to improper sanitization of user input, HTTPEngine.Handle allows for directory traversal, allowing an attacker to read files outside of the target directory that the server has permission to read.",0001-01-01T00:00:00Z,2021-04-14T20:04:52Z,aahframe.work,Go,,,
GO-2022-0475,Arbitrary code execution in go command with cgo in cmd/go and cmd/cgo,"The go command may execute arbitrary code at build time when cgo is in use. This may occur when running go get on a malicious package, or any other command that builds untrusted code.

This can be caused by malicious unquoted symbol name in a linked object file.",0001-01-01T00:00:00Z,2022-07-28T17:24:30Z,toolchain,Go,,,
GO-2023-1923,Panic when handling invalid HAProxy PROXY v2 request in github.com/mastercactapus/proxyprotocol,Panic when handling invalid HAProxy PROXY v2 request in github.com/mastercactapus/proxyprotocol,0001-01-01T00:00:00Z,0001-01-01T00:00:00Z,github.com/mastercactapus/proxyprotocol,Go,,,
GO-2021-0154,Man-in-the-middle attack with SessionTicketsDisabled in crypto/tls,"When SessionTicketsDisabled is enabled, crypto/tls allowed man-in-the-middle attackers to spoof clients via unspecified vectors.

If the server enables TLS client authentication using certificates (this is rare) and explicitly sets SessionTicketsDisabled to true in the tls.Config, then a malicious client can falsely assert ownership of any client certificate it wishes.",0001-01-01T00:00:00Z,2022-05-25T21:11:41Z,stdlib,Go,,,
GO-2021-0095,Sensitive information exposure in github.com/google/go-tpm,"Due to repeated usage of a XOR key an attacker that can eavesdrop on the TPM 1.2 transport is able to calculate usageAuth for keys created using CreateWrapKey, despite it being encrypted, allowing them to use the created key.",0001-01-01T00:00:00Z,2021-04-14T20:04:52Z,github.com/google/go-tpm,Go,,,
GO-2022-0988,Failure to strip relative path components in net/url,"JoinPath and URL.JoinPath do not remove ../ path elements appended to a relative path. For example, JoinPath(""https://go.dev"", ""../go"") returns the URL ""https://go.dev/../go"", despite the JoinPath documentation stating that ../ path elements are removed from the result.",0001-01-01T00:00:00Z,2022-09-12T20:23:15Z,stdlib,Go,,,
GO-2023-1640,Path traversal when unzipping files in github.com/dablelv/go-huge-util,Path traversal when unzipping files in github.com/dablelv/go-huge-util,0001-01-01T00:00:00Z,0001-01-01T00:00:00Z,github.com/dablelv/go-huge-util,Go,,,
GO-2022-0588,Cross-site scripting in github.com/microcosm-cc/bluemonday,"The bluemonday HTML sanitizer can leak the contents of a ""style"" element into HTML output, potentially causing XSS vulnerabilities.

The default bluemonday sanitization policies are not vulnerable. Only user-defined policies allowing ""select"", ""style"", and ""option"" elements are affected.

Permitting the ""style"" element in policies is hazardous, because bluemonday does not contain a CSS sanitizer. Newer versions of bluemonday suppress ""style"" and ""script"" elements even when allowed by a policy unless the policy explicitly requests unsafe processing.",0001-01-01T00:00:00Z,2022-08-15T18:02:24Z,github.com/microcosm-cc/bluemonday,Go,,,
GO-2021-0057,Panic due to improper input validation in github.com/buger/jsonparser,"Due to improper bounds checking, maliciously crafted JSON objects can cause an out-of-bounds panic. If parsing user input, this may be used as a denial of service vector.",0001-01-01T00:00:00Z,2021-04-14T20:04:52Z,github.com/buger/jsonparser,Go,,,
GO-2023-1578,Denial of service in github.com/hashicorp/go-getter/v2,HashiCorp go-getter is vulnerable to decompression bombs. This can lead to excessive memory consumption and denial-of-service attacks.,0001-01-01T00:00:00Z,0001-01-01T00:00:00Z,github.com/hashicorp/go-getter/v2,Go,,,
GO-2022-0189,"Remote command execution via ""go get"" with ""-u"" flag in cmd/go","The ""go get"" command is vulnerable to remote code execution when executed with the -u flag and the import path of a malicious Go package, or a package that imports it directly or indirectly.

Specifically, it is only vulnerable in GOPATH mode, but not in module mode (the distinction is documented at https://golang.org/cmd/go/#hdr-Module_aware_go_get).

Using custom domains, it's possible to arrange things so that a Git repository is cloned to a folder named "".git"" by using a vanity import path that ends with ""/.git"". If the Git repository root contains a ""HEAD"" file, a ""config"" file, an ""objects"" directory, a ""refs"" directory, with some work to ensure the proper ordering of operations, ""go get -u"" can be tricked into considering the parent directory as a repository root, and running Git commands on it. That will use the ""config"" file in the original Git repository root for its configuration, and if that config file contains malicious commands, they will execute on the system running ""go get -u"".

Note that forbidding import paths with a .git element might not be sufficient to mitigate this issue, as on certain systems there can be other aliases for VCS state folders.",0001-01-01T00:00:00Z,2022-08-04T21:30:35Z,toolchain,Go,,,
GO-2021-0061,Denial of service in gopkg.in/yaml.v2,"Due to unbounded alias chasing, a maliciously crafted YAML file can cause the system to consume significant system resources. If parsing user input, this may be used as a denial of service vector.",0001-01-01T00:00:00Z,2021-04-14T20:04:52Z,gopkg.in/yaml.v2,Go,,,
GO-2022-1038,Incorrect sanitization of forwarded query parameters in net/http/httputil,"Requests forwarded by ReverseProxy include the raw query parameters from the inbound request, including unparsable parameters rejected by net/http. This could permit query parameter smuggling when a Go proxy forwards a parameter with an unparsable value.

After fix, ReverseProxy sanitizes the query parameters in the forwarded query when the outbound request's Form field is set after the ReverseProxy. Director function returns, indicating that the proxy has parsed the query parameters. Proxies which do not parse query parameters continue to forward the original query parameters unchanged.",0001-01-01T00:00:00Z,0001-01-01T00:00:00Z,stdlib,Go,,,
GO-2022-1144,Excessive memory growth in net/http and golang.org/x/net/http2,"An attacker can cause excessive memory growth in a Go server accepting HTTP/2 requests.

HTTP/2 server connections contain a cache of HTTP header keys sent by the client. While the total number of entries in this cache is capped, an attacker sending very large keys can cause the server to allocate approximately 64 MiB per open connection.",0001-01-01T00:00:00Z,0001-01-01T00:00:00Z,stdlib,Go,,,
GO-2023-1860,"IBC protocol ""Huckleberry"" vulnerability in github.com/cosmos/ibc-go","The ibc-go module is affected by the Inter-Blockchain Communication (IBC) protocol ""Huckleberry"" vulnerability.",0001-01-01T00:00:00Z,0001-01-01T00:00:00Z,github.com/cosmos/ibc-go/v7,Go,,,
GO-2020-0026,Arbitrary file write via archive extraction in github.com/openshift/source-to-image,"Due to improper path sanitization, archives containing relative file paths can cause files to be written (or overwritten) outside of the target directory.",0001-01-01T00:00:00Z,2021-04-14T20:04:52Z,github.com/openshift/source-to-image,Go,,,
GO-2021-0160,Incorrect calculation affecting RSA computations in math/big,"Int.Exp Montgomery mishandled carry propagation and produced an incorrect output, which makes it easier for attackers to obtain private RSA keys via unspecified vectors.

This issue can affect RSA computations in crypto/rsa, which is used by crypto/tls. TLS servers on 32-bit systems could plausibly leak their RSA private key due to this issue. Other protocol implementations that create many RSA signatures could also be impacted in the same way.

Specifically, incorrect results in one part of the RSA Chinese Remainder computation can cause the result to be incorrect in such a way that it leaks one of the primes. While RSA blinding should prevent an attacker from crafting specific inputs that trigger the bug, on 32-bit systems the bug can be expected to occur at random around one in 2^26 times. Thus collecting around 64 million signatures (of known data) from an affected server should be enough to extract the private key used.

Note that on 64-bit systems, the frequency of the bug is so low (less than one in 2^50) that it would be very difficult to exploit.",0001-01-01T00:00:00Z,2022-01-05T15:31:16Z,stdlib,Go,,,
GO-2023-1535,Panic during unmarshal of Server Hello in github.com/pion/dtls/v2,"Unmarshalling a Server Hello can panic, which could allow a denial of service.",0001-01-01T00:00:00Z,0001-01-01T00:00:00Z,github.com/pion/dtls/v2,Go,,,
GO-2020-0004,Authentication bypass in github.com/nanobox-io/golang-nanoauth,"If any of the ListenAndServe functions are called with an empty token, token authentication is disabled globally for all listeners.

Also, a minor timing side channel was present allowing attackers with very low latency and able to make many requests to potentially recover the token.",0001-01-01T00:00:00Z,2021-04-14T20:04:52Z,github.com/nanobox-io/golang-nanoauth,Go,,,
GO-2022-1043,Hardcoded hashed password in github.com/flyteorg/flyteadmin,"Default authorization server's configuration settings contain a known hardcoded hashed password.

Users who enable auth but do not override this setting may unknowingly allow public traffic in by way of this default password with attackers effectively impersonating propeller.",0001-01-01T00:00:00Z,0001-01-01T00:00:00Z,github.com/flyteorg/flyteadmin,Go,,,
GO-2023-1988,Improper rendering of text nodes in golang.org/x/net/html,"Text nodes not in the HTML namespace are incorrectly literally rendered, causing text which should be escaped to not be. This could lead to an XSS attack.",0001-01-01T00:00:00Z,0001-01-01T00:00:00Z,golang.org/x/net,Go,,,
GO-2022-0527,Stack exhaustion in Glob on certain paths in io/fs,Calling Glob on a path which contains a large number of path separators can cause a panic due to stack exhaustion.,0001-01-01T00:00:00Z,2022-07-20T20:52:22Z,stdlib,Go,,,
GO-2021-0263,Panic on invalid symbol tables in debug/macho,"Calling File.ImportedSymbols on a loaded file which contains an invalid dynamic symbol table command can cause a panic, in particular if the encoded number of undefined symbols is larger than the number of symbols in the symbol table.",0001-01-01T00:00:00Z,2022-01-13T03:45:03Z,stdlib,Go,,,
GO-2021-0107,Panic or authentication bypass in github.com/ecnepsnai/web,"Web Sockets do not execute any AuthenticateMethod methods which may be set, leading to a nil pointer dereference if the returned UserData pointer is assumed to be non-nil, or authentication bypass.

This issue only affects WebSockets with an AuthenticateMethod hook. Request handlers that do not explicitly use WebSockets are not vulnerable.",0001-01-01T00:00:00Z,2021-07-28T18:08:05Z,github.com/ecnepsnai/web,Go,,,
GO-2021-0226,Cross-site scripting in net/http/cgi and net/http/fcgi,"When a Handler does not explicitly set the Content-Type header, the the package would default to “text/html”, which could cause a Cross-Site Scripting vulnerability if an attacker can control any part of the contents of a response.

The Content-Type header is now set based on the contents of the first Write using http.DetectContentType, which is consistent with the behavior of the net/http package.

Although this protects some applications that validate the contents of uploaded files, not setting the Content-Type header explicitly on any attacker-controlled file is unsafe and should be avoided.",0001-01-01T00:00:00Z,2022-01-13T03:44:58Z,stdlib,Go,,,
GO-2021-0108,CRLF vulnerability in Fiber in github.com/gofiber/fiber,"Due to improper input sanitization, a maliciously constructed filename could cause a file download to use an attacker controlled filename, as well as injecting additional headers into an HTTP response.",0001-01-01T00:00:00Z,2021-07-28T18:08:05Z,github.com/gofiber/fiber,Go,,,
GO-2022-1026,Incorrect DNSSEC validation in github.com/peterzen/goresolver,"DNSSEC validation is not performed correctly. An attacker can cause this package to report successful validation for invalid, attacker-controlled records.

Root DNSSEC public keys are not validated, permitting an attacker to present a self-signed root key and delegation chain.",0001-01-01T00:00:00Z,0001-01-01T00:00:00Z,github.com/peterzen/goresolver,Go,,,
GO-2023-1595,Incorrect multiplication of unreduced P-256 scalars in filippo.io/nistec,"Multiplication of certain unreduced P-256 scalars produce incorrect results.

There are no protocols known at this time that can be attacked due to this.",0001-01-01T00:00:00Z,0001-01-01T00:00:00Z,filippo.io/nistec,Go,,,
GO-2021-0102,Panic in decryption in code.cloudfoundry.org/gorouter,"Due to improper input validation, a maliciously crafted input can cause a panic, due to incorrect nonce size. If this package is used to decrypt user supplied messages without checking the size of supplied nonces, this may be used as a vector for a denial of service attack.",0001-01-01T00:00:00Z,2021-07-28T18:08:05Z,code.cloudfoundry.org/gorouter,Go,,,
GO-2022-1040,Insufficient sanitization of data files in helm.sh/helm/v3,"Helm does not sanitize all fields read from repository data files. A maliciously crafted data file may contain strings containing arbitrary data. If printed to a terminal, a malicious string could obscure or alter data on the screen.",0001-01-01T00:00:00Z,0001-01-01T00:00:00Z,helm.sh/helm/v3,Go,,,
GO-2023-2098,Unsoundness in variable comparison / non-unique binary decomposition in github.com/consensys/gnark,Unsoundness in variable comparison / non-unique binary decomposition in github.com/consensys/gnark,0001-01-01T00:00:00Z,0001-01-01T00:00:00Z,github.com/consensys/gnark,Go,,,
GO-2022-0433,Stack overflow from a large amount of PEM data in encoding/pem,encoding/pem in Go before 1.17.9 and 1.18.x before 1.18.1 has a Decode stack overflow via a large amount of PEM data.,0001-01-01T00:00:00Z,2022-05-20T21:17:25Z,stdlib,Go,,,
GO-2021-0356,Denial of service via crafted Signer in golang.org/x/crypto/ssh,"Attackers can cause a crash in SSH servers when the server has been configured by passing a Signer to ServerConfig.AddHostKey such that
1) the Signer passed to AddHostKey does not implement AlgorithmSigner, and
2) the Signer passed to AddHostKey returns a key of type “ssh-rsa” from its PublicKey method.

Servers that only use Signer implementations provided by the ssh package are unaffected.",0001-01-01T00:00:00Z,2022-04-25T20:38:40Z,golang.org/x/crypto,Go,,,
GO-2023-2003,Blst fails to perform group signature validation,"When complemented with a check for infinity, blst skips performing a signature group-check. Formally speaking, infinity is the identity element of the elliptic curve group and as such it is a member of the group, so the group-check should be performed. The fix performs the check even in the presence of infinity.",0001-01-01T00:00:00Z,0001-01-01T00:00:00Z,github.com/supranational/blst,Go,,,
GO-2021-0060,Authentication bypass in github.com/russellhaering/gosaml2,"Due to the behavior of encoding/xml, a crafted XML document may cause XML Digital Signature validation to be entirely bypassed, causing an unsigned document to appear signed.",0001-01-01T00:00:00Z,2021-04-14T20:04:52Z,github.com/russellhaering/gosaml2,Go,,,
GO-2022-0345,Environment variable leakage in github.com/containers/buildah,The RunUsingChroot function unintentionally propagates environment variables from the current process to the child process.,0001-01-01T00:00:00Z,2022-07-15T23:30:21Z,github.com/containers/buildah,Go,,,
GO-2021-0052,Inconsistent interpretation of HTTP Requests in github.com/gin-gonic/gin,"Due to improper HTTP header sanitization, a malicious user can spoof their source IP address by setting the X-Forwarded-For header. This may allow a user to bypass IP based restrictions, or obfuscate their true source.",0001-01-01T00:00:00Z,2021-04-14T20:04:52Z,github.com/gin-gonic/gin,Go,,,
GO-2023-1867,Replay attacks involving proofs in github.com/bnb-chain/tss-lib,Replay attacks involving proofs in github.com/bnb-chain/tss-lib.,0001-01-01T00:00:00Z,0001-01-01T00:00:00Z,github.com/bnb-chain/tss-lib,Go,,,
GO-2023-1631,Panic when parsing invalid messages in google.golang.org/protobuf,"Parsing invalid messages can panic.

Parsing a text-format message which contains a potential number consisting of a minus sign, one or more characters of whitespace, and no further input will cause a panic.",0001-01-01T00:00:00Z,0001-01-01T00:00:00Z,google.golang.org/protobuf,Go,,,
GO-2023-1705,"Excessive resource consumption in net/http, net/textproto and mime/multipart","Multipart form parsing can consume large amounts of CPU and memory when processing form inputs containing very large numbers of parts.

This stems from several causes:

1. mime/multipart.Reader.ReadForm limits the total memory a parsed multipart form can consume. ReadForm can undercount the amount of memory consumed, leading it to accept larger inputs than intended.
2. Limiting total memory does not account for increased pressure on the garbage collector from large numbers of small allocations in forms with many parts.
3. ReadForm can allocate a large number of short-lived buffers, further increasing pressure on the garbage collector.

The combination of these factors can permit an attacker to cause an program that parses multipart forms to consume large amounts of CPU and memory, potentially resulting in a denial of service. This affects programs that use mime/multipart.Reader.ReadForm, as well as form parsing in the net/http package with the Request methods FormFile, FormValue, ParseMultipartForm, and PostFormValue.

With fix, ReadForm now does a better job of estimating the memory consumption of parsed forms, and performs many fewer short-lived allocations.

In addition, the fixed mime/multipart.Reader imposes the following limits on the size of parsed forms:

1. Forms parsed with ReadForm may contain no more than 1000 parts. This limit may be adjusted with the environment variable GODEBUG=multipartmaxparts=.
2. Form parts parsed with NextPart and NextRawPart may contain no more than 10,000 header fields. In addition, forms parsed with ReadForm may contain no more than 10,000 header fields across all parts. This limit may be adjusted with the environment variable GODEBUG=multipartmaxheaders=.",0001-01-01T00:00:00Z,0001-01-01T00:00:00Z,stdlib,Go,,,
GO-2021-0234,Infinite loop when decoding inputs in encoding/xml,"The Decode, DecodeElement, and Skip methods of an xml.Decoder provided by xml.NewTokenDecoder may enter an infinite loop when operating on a custom xml.TokenReader which returns an EOF in the middle of an open XML element.",0001-01-01T00:00:00Z,2022-02-17T17:34:24Z,stdlib,Go,,,
GO-2022-1175,Exposure of local files in github.com/cortexproject/cortex,A malicious actor could remotely read local files by submitting to the Alertmanager Set Configuration API maliciously crafted inputs. Only users of the Alertmanager service where `-experimental.alertmanager.enable-api` or `enable_api: true` is configured are affected.,0001-01-01T00:00:00Z,0001-01-01T00:00:00Z,github.com/cortexproject/cortex,Go,,,
GO-2021-0097,Panic due to out-of-bounds read in github.com/dhowden/tag,"Due to improper bounds checking, a number of methods can trigger a panic due to attempted out-of-bounds reads. If the package is used to parse user supplied input, this may be used as a vector for a denial of service attack.",0001-01-01T00:00:00Z,2021-04-14T20:04:52Z,github.com/dhowden/tag,Go,,,
GO-2022-0434,Panic during certificate parsing on Darwin in crypto/x509,"Verifying certificate chains containing certificates which are not compliant with RFC 5280 causes Certificate.Verify to panic on macOS.

These chains can be delivered through TLS and can cause a crypto/tls or net/http client to crash.",0001-01-01T00:00:00Z,2022-05-23T21:59:00Z,stdlib,Go,,,
GO-2020-0046,Panic due to malformed XML digital signature in github.com/russellhaering/goxmldsig,"Due to a nil pointer dereference, a malformed XML Digital Signature can cause a panic during validation. If user supplied signatures are being validated, this may be used as a denial of service vector.",0001-01-01T00:00:00Z,2021-04-14T20:04:52Z,github.com/russellhaering/goxmldsig,Go,,,
GO-2022-1117,Insufficient verification of proofs in github.com/codenotary/immudb,"In certain scenarios, a malicious immudb server can provide a falsified proof that will be accepted by the client SDK signing a falsified transaction replacing the genuine one. This situation can not be triggered by a genuine immudb server and requires the client to perform a specific list of verified operations resulting in acceptance of an invalid state value.

This vulnerability only affects immudb client SDKs, the immudb server itself is not affected by this vulnerability.",0001-01-01T00:00:00Z,0001-01-01T00:00:00Z,github.com/codenotary/immudb,Go,,,
GO-2023-1681,Time-of-check time-of-use race condition in github.com/containers/podman/v4,"A Time-of-check Time-of-use (TOCTOU) flaw appears in this version of podman. This issue may allow a malicious user to replace a normal file in a volume with a symlink while exporting the volume, allowing for access to arbitrary files on the host file system.",0001-01-01T00:00:00Z,0001-01-01T00:00:00Z,github.com/containers/podman/v4,Go,,,
GO-2021-0099,Zip slip directory exploit in github.com/deislabs/oras,"Due to improper path validation, using the github.com/deislabs/oras/pkg/content.FileStore content store may result in directory traversal during archive extraction, allowing a malicious archive to write paths to arbitrary paths that the process can write to.",0001-01-01T00:00:00Z,2021-04-14T20:04:52Z,github.com/deislabs/oras,Go,,,
GO-2023-1547,Information disclosure in helm.sh/helm/v3,"An information disclosure vulnerability exists in the `getHostByName` template function.

`getHostByName` is a Helm template function introduced in Helm v3. The function is able to accept a hostname and return an IP address for that hostname. To get the IP address the function performs a DNS lookup. The DNS lookup happens when used with `helm install|upgrade|template` or when the Helm SDK is used to render a chart.

Information passed into the chart can be disclosed to the DNS servers used to lookup the IP address. For example, a malicious chart could inject `getHostByName` into a chart in order to disclose values to a malicious DNS server.",0001-01-01T00:00:00Z,0001-01-01T00:00:00Z,helm.sh/helm/v3,Go,,,
GO-2021-0077,Authentication bypass in go.etcd.io/etcd,"A user can use a valid client certificate that contains a CommonName that matches a valid RBAC username to authenticate themselves as that user, despite lacking the required credentials. This may allow authentication bypass, but requires a certificate that is issued by a CA trusted by the server.",0001-01-01T00:00:00Z,2021-04-14T20:04:52Z,go.etcd.io/etcd,Go,,,
GO-2020-0003,Resource exhaustion in github.com/revel/revel,An attacker can cause an application that accepts slice parameters (https://revel.github.io/manual/parameters.html#slices) to allocate large amounts of memory and crash through manipulating the request query sent to the application.,0001-01-01T00:00:00Z,2021-04-14T20:04:52Z,github.com/revel/revel,Go,,,
GO-2020-0012,Panic due to improper verification of cryptographic signatures in golang.org/x/crypto/ssh,"An attacker can craft an ssh-ed25519 or sk-ssh-ed25519@openssh.com public key, such that the library will panic when trying to verify a signature with it. If verifying signatures using user supplied public keys, this may be used as a denial of service vector.",0001-01-01T00:00:00Z,2021-04-14T20:04:52Z,golang.org/x/crypto,Go,,,
GO-2020-0036,Excessive resource consumption in YAML parsing in gopkg.in/yaml.v2,"Due to unbounded aliasing, a crafted YAML file can cause consumption of significant system resources. If parsing user supplied input, this may be used as a denial of service vector.",0001-01-01T00:00:00Z,2021-04-14T20:04:52Z,gopkg.in/yaml.v2,Go,,,
GO-2023-1600,Arbitrary code execution in github.com/kitabisa/teler-waf,"Improper handling of payload with special characters, such as CR/LF and horizontal tab, can lead to execution of arbitrary JavaScript code.",0001-01-01T00:00:00Z,0001-01-01T00:00:00Z,github.com/kitabisa/teler-waf,Go,,,
GO-2021-0086,Cross-site scripting in github.com/documize/community,"HTML content in markdown is not sanitized during rendering, possibly allowing XSS if used to render untrusted user input.",0001-01-01T00:00:00Z,2021-04-14T20:04:52Z,github.com/documize/community,Go,,,
GO-2021-0068,Arbitrary code injection via the go command with cgo on Windows in cmd/go,"The go command may execute arbitrary code at build time when using cgo on Windows. This can be triggered by running go get on a malicious module, or any other time the code is built.",0001-01-01T00:00:00Z,2021-04-14T20:04:52Z,toolchain,Go,,,
GO-2021-0082,Denial of service in github.com/facebook/fbthrift,"Thirft Servers preallocate memory for the declared size of messages before checking the actual size of the message. This allows a malicious user to send messages that declare that they are significantly larger than they actually are, allowing them to force the server to allocate significant amounts of memory. This can be used as a denial of service vector.",0001-01-01T00:00:00Z,2021-04-14T20:04:52Z,github.com/facebook/fbthrift,Go,,,
GO-2022-0191,Denial of service in chain verification in crypto/x509,"The crypto/x509 package does not limit the amount of work performed for each chain verification, which might allow attackers to craft pathological inputs leading to a CPU denial of service. Go TLS servers accepting client certificates and TLS clients verifying certificates are affected.",0001-01-01T00:00:00Z,2022-07-15T23:03:26Z,stdlib,Go,,,
GO-2023-1930,Unrestricted memory consumption in github.com/hamba/avro,Unrestricted memory consumption in github.com/hamba/avro,0001-01-01T00:00:00Z,0001-01-01T00:00:00Z,github.com/hamba/avro/v2,Go,,,
GO-2022-0503,Denial of service via malformed CAR data in github.com/ipld/go-car and go-car/v2,Decoding malformed CAR data can cause panics or excessive memory usage.,0001-01-01T00:00:00Z,2022-07-30T03:50:50Z,github.com/ipld/go-car,Go,,,
GO-2023-1295,SQL injection in github.com/square/squalor,There is a potential for SQL injection in the table name parameter.,0001-01-01T00:00:00Z,0001-01-01T00:00:00Z,github.com/square/squalor,Go,,,
GO-2022-0537,Panic when decoding Float and Rat types in math/big,"Decoding big.Float and big.Rat types can panic if the encoded message is too short, potentially allowing a denial of service.",0001-01-01T00:00:00Z,2022-08-01T22:21:06Z,stdlib,Go,,,
GO-2021-0067,Panic when opening archives in archive/zip,"Using Reader.Open on an archive containing a file with a path prefixed by ""../"" will cause a panic due to a stack overflow. If parsing user supplied archives, this may be used as a denial of service vector.",0001-01-01T00:00:00Z,2021-04-14T20:04:52Z,stdlib,Go,,,
GO-2022-1037,Unbounded memory consumption when reading headers in archive/tar,"Reader.Read does not set a limit on the maximum size of file headers. A maliciously crafted archive could cause Read to allocate unbounded amounts of memory, potentially causing resource exhaustion or panics. After fix, Reader.Read limits the maximum size of header blocks to 1 MiB.",0001-01-01T00:00:00Z,0001-01-01T00:00:00Z,stdlib,Go,,,
GO-2021-0347,Stack exhaustion when compiling deeply nested expressions in regexp,"On 64-bit platforms, an extremely deeply nested expression can cause regexp.Compile to cause goroutine stack exhaustion, forcing the program to exit. Note this applies to very large expressions, on the order of 2MB.",0001-01-01T00:00:00Z,2022-05-23T22:15:47Z,stdlib,Go,,,
GO-2022-0289,Misdirected I/O in syscall,"When a Go program running on a Unix system is out of file descriptors and calls syscall.ForkExec (including indirectly by using the os/exec package), syscall.ForkExec can close file descriptor 0 as it fails. If this happens (or can be provoked) repeatedly, it can result in misdirected I/O such as writing network traffic intended for one connection to a different connection, or content intended for one file to a different one.

For users who cannot immediately update to the new release, the bug can be mitigated by raising the per-process file descriptor limit.",0001-01-01T00:00:00Z,2022-05-18T18:23:23Z,stdlib,Go,,,
GO-2023-1567,Open redirect in github.com/caddyserver/caddy/v2,"Due to improper request sanitization, a crafted URL can cause the static file handler to redirect to an attacker chosen URL, allowing for open redirect attacks.",0001-01-01T00:00:00Z,0001-01-01T00:00:00Z,github.com/caddyserver/caddy/v2,Go,,,
GO-2023-1570,Panic on large handshake records in crypto/tls,"Large handshake records may cause panics in crypto/tls.

Both clients and servers may send large TLS handshake records which cause servers and clients, respectively, to panic when attempting to construct responses.

This affects all TLS 1.3 clients, TLS 1.2 clients which explicitly enable session resumption (by setting Config.ClientSessionCache to a non-nil value), and TLS 1.3 servers which request client certificates (by setting Config.ClientAuth >= RequestClientCert).",0001-01-01T00:00:00Z,0001-01-01T00:00:00Z,stdlib,Go,,,
GO-2023-1526,Server-side request forgery in github.com/hakobe/paranoidhttp,"Paranoidhttp before is vulnerable to SSRF because [::] is equivalent to the 127.0.0.1 address, but does not match the filter for private addresses.",0001-01-01T00:00:00Z,0001-01-01T00:00:00Z,github.com/hakobe/paranoidhttp,Go,,,
GO-2022-0171,Mishandled trust preferences for root certificates on Darwin in crypto/x509,"On Darwin, user's trust preferences for root certificates were not honored. If the user had a root certificate loaded in their Keychain that was explicitly not trusted, a Go program would still verify a connection using that root certificate.",0001-01-01T00:00:00Z,2022-05-24T20:17:59Z,stdlib,Go,,,
GO-2023-1704,Excessive memory allocation in net/http and net/textproto,"HTTP and MIME header parsing can allocate large amounts of memory, even when parsing small inputs, potentially leading to a denial of service.

Certain unusual patterns of input data can cause the common function used to parse HTTP and MIME headers to allocate substantially more memory than required to hold the parsed headers. An attacker can exploit this behavior to cause an HTTP server to allocate large amounts of memory from a small request, potentially leading to memory exhaustion and a denial of service.

With fix, header parsing now correctly allocates only the memory required to hold parsed headers.",0001-01-01T00:00:00Z,0001-01-01T00:00:00Z,stdlib,Go,,,
GO-2023-2024,libp2p nodes vulnerable to OOM attack,A malicious actor can store an arbitrary amount of data in the memory of a remote node by sending the node a message with a signed peer record. Signed peer records from randomly generated peers can be sent by a malicious actor. This memory does not get garbage collected and so the remote node can run out of memory (OOM).,0001-01-01T00:00:00Z,0001-01-01T00:00:00Z,github.com/libp2p/go-libp2p,Go,,,
GO-2023-1519,Command injection in github.com/rancher/wrangler,"A command injection vulnerability exists in the Wrangler Git package. Specially crafted commands can be passed to Wrangler that will change their behavior and cause confusion when executed through Git, resulting in command injection in the underlying host.

A workaround is to sanitize input passed to the Git package to remove potential unsafe and ambiguous characters. Otherwise, the best course of action is to update to a patched Wrangler version.",0001-01-01T00:00:00Z,0001-01-01T00:00:00Z,github.com/rancher/wrangler,Go,,,
GO-2022-0956,Excessive resource consumption in gopkg.in/yaml.v2,Parsing malicious or large YAML documents can consume excessive amounts of CPU or memory.,0001-01-01T00:00:00Z,2022-08-29T22:15:46Z,gopkg.in/yaml.v2,Go,,,
GO-2023-1772,Memory exhaustion in github.com/distribution/distribution,Systems that run distribution built after a specific commit running on memory-restricted environments can suffer from denial of service by a crafted malicious /v2/_catalog API endpoint request.,0001-01-01T00:00:00Z,0001-01-01T00:00:00Z,github.com/distribution/distribution,Go,,,
GO-2021-0053,Panic due to improper input validation in github.com/gogo/protobuf,"Due to improper bounds checking, maliciously crafted input to generated Unmarshal methods can cause an out-of-bounds panic. If parsing messages from untrusted parties, this may be used as a denial of service vector.",0001-01-01T00:00:00Z,2021-04-14T20:04:52Z,github.com/gogo/protobuf,Go,,,
GO-2021-0069,Panic during division of very large numbers in math/big,A number of math/big.Int methods can panic when provided large inputs due to a flawed division method.,0001-01-01T00:00:00Z,2021-04-14T20:04:52Z,stdlib,Go,,,
GO-2021-0089,Infinite loop in github.com/buger/jsonparser,"Parsing malformed JSON which contain opening brackets, but not closing brackets, leads to an infinite loop. If operating on untrusted user input this can be used as a denial of service vector.",0001-01-01T00:00:00Z,2021-04-14T20:04:52Z,github.com/buger/jsonparser,Go,,,
GO-2022-0533,Path traversal on Windows in path/filepath,"On Windows, the filepath.Clean function can convert certain invalid paths to valid, absolute paths, potentially allowing a directory traversal attack.

For example, Clean(`.\c:`) returns `c:`.",0001-01-01T00:00:00Z,2022-07-28T17:25:07Z,stdlib,Go,,,
GO-2022-0272,Directory traversal in github.com/kataras/iris and github.com/kataras/iris/v12,"The Context.UploadFormFiles function is vulnerable to directory traversal attacks, and can be made to write to arbitrary locations outside the destination directory.

This vulnerability only occurs when built with Go versions prior to 1.17. Go 1.17 and later strip directory paths from filenames returned by ""mime/multipart"".Part.FileName, which avoids this issue.",0001-01-01T00:00:00Z,2022-07-15T23:08:12Z,github.com/kataras/iris/v12,Go,,,
GO-2022-0461,Unbounded memory consumption in github.com/pion/dtls/v2,"Attacker can cause unbounded memory consumption.

The Pion DTLS client and server buffer handshake data with no upper limit, permitting an attacker to cause unbounded memory consumption by sending an unterminated handshake.",0001-01-01T00:00:00Z,2022-07-01T20:07:25Z,github.com/pion/dtls/v2,Go,,,
GO-2023-1546,Denial of service in go.opentelemetry.io/contrib/instrumentation/net/http/otelhttp,"The otelhttp package of opentelemetry-go-contrib is vulnerable to a denial-of-service attack.

The otelhttp package uses the httpconv.ServerRequest function to annotate metric measurements for the http.server.request_content_length, http.server.response_content_length, and http.server.duration instruments. The ServerRequest function sets the http.target attribute value to be the whole request URI (including the query string). The metric instruments do not ""forget"" previous measurement attributes when ""cumulative"" temporality is used, meaning that the cardinality of the measurements allocated is directly correlated with the unique URIs handled. If the query string is constantly random, this will result in a constant increase in memory allocation that can be used in a denial-of-service attack.",0001-01-01T00:00:00Z,0001-01-01T00:00:00Z,go.opentelemetry.io/contrib/instrumentation/net/http/otelhttp,Go,,,
GO-2022-0316,Incorrect calculation in github.com/open-policy-agent/opa,Pretty-printing an AST that contains synthetic nodes can change the logic of some statements by reordering array literals.,0001-01-01T00:00:00Z,2022-07-27T20:27:33Z,github.com/open-policy-agent/opa,Go,,,
GO-2022-1083,Panic on malformed messages in github.com/free5gc/aper,A malformed message can crash the free5gc/amf and free5gc/ngap decoders via an index-out-of-range panic in `aper.GetBitString`.,0001-01-01T00:00:00Z,0001-01-01T00:00:00Z,github.com/free5gc/aper,Go,,,
GO-2023-1941,Panic when handling invalid request in MITM mode in github.com/elazarl/goproxy,An invalid request can cause a panic when running in MITM mode.,0001-01-01T00:00:00Z,0001-01-01T00:00:00Z,github.com/elazarl/goproxy,Go,,,
GO-2020-0034,Path traversal in github.com/artdarek/go-unzip,"Due to improper path sanitization, archives containing relative file paths can cause files to be written (or overwritten) outside of the target directory.",0001-01-01T00:00:00Z,2021-04-14T20:04:52Z,github.com/artdarek/go-unzip,Go,,,
GO-2023-2102,HTTP/2 rapid reset can cause excessive work in net/http,"A malicious HTTP/2 client which rapidly creates requests and immediately resets them can cause excessive server resource consumption. While the total number of requests is bounded by the http2.Server.MaxConcurrentStreams setting, resetting an in-progress request allows the attacker to create a new request while the existing one is still executing.

With the fix applied, HTTP/2 servers now bound the number of simultaneously executing handler goroutines to the stream concurrency limit (MaxConcurrentStreams). New requests arriving when at the limit (which can only happen after the client has reset an existing, in-flight request) will be queued until a handler exits. If the request queue grows too large, the server will terminate the connection.

This issue is also fixed in golang.org/x/net/http2 for users manually configuring HTTP/2.

The default stream concurrency limit is 250 streams (requests) per HTTP/2 connection. This value may be adjusted using the golang.org/x/net/http2 package; see the Server.MaxConcurrentStreams setting and the ConfigureServer function.",0001-01-01T00:00:00Z,0001-01-01T00:00:00Z,stdlib,Go,,,
GO-2022-0411,Insufficient randomness in github.com/Masterminds/goutils,"Randomly-generated alphanumeric strings contain significantly less entropy than expected.

The RandomAlphaNumeric and CryptoRandomAlphaNumeric functions always return strings containing at least one digit from 0 to 9. This significantly reduces the amount of entropy in short strings generated by these functions.",0001-01-01T00:00:00Z,2022-07-01T20:08:24Z,github.com/Masterminds/goutils,Go,,,
GO-2022-0761,Improper input validation in net/http and net/http/cgi,"An input validation flaw in the CGI components allows the HTTP_PROXY environment variable to be set by the incoming Proxy header, which changes where Go by default proxies all outbound HTTP requests.

This environment variable is also used to set the outgoing proxy, enabling an attacker to insert a proxy into outgoing requests of a CGI program.

Read more about ""httpoxy"" here: https://httpoxy.org.",0001-01-01T00:00:00Z,2022-08-09T17:05:15Z,stdlib,Go,,,
GO-2022-0528,Panic on crafted messages in github.com/containrrr/shoutrrr,"Sending a message exactly 2000, 4000, or 6000 characters in length to Discord causes a panic.",0001-01-01T00:00:00Z,2022-07-30T03:51:17Z,github.com/containrrr/shoutrrr,Go,,,
GO-2023-1557,Denial of service via HAMT decoding panic in github.com/ipfs/go-unixfs,"Trying to read malformed HAMT sharded directories can cause panics and virtual memory leaks. If you are reading untrusted user input, an attacker can then trigger a panic.

This is caused by bogus `fanout` parameter in the HAMT directory nodes. A workaround is to not feed untrusted user data to the decoding functions.",0001-01-01T00:00:00Z,0001-01-01T00:00:00Z,github.com/ipfs/go-unixfs,Go,,,
GO-2023-2043,Improper handling of special tags within script contexts in html/template,"The html/template package does not apply the proper rules for handling occurrences of ""<script"", ""<!--"", and ""</script"" within JS literals in <script> contexts. This may cause the template parser to improperly consider script contexts to be terminated early, causing actions to be improperly escaped. This could be leveraged to perform an XSS attack.",0001-01-01T00:00:00Z,0001-01-01T00:00:00Z,stdlib,Go,,,
GO-2021-0163,Privilege escalation on Windows via malicious DLL in syscall,Untrusted search path vulnerability on Windows related to LoadLibrary allows local users to gain privileges via a malicious DLL in the current working directory.,0001-01-01T00:00:00Z,2022-01-05T22:41:50Z,stdlib,Go,,,
GO-2022-1086,Server-side request forger via X-Skipper-Proxy in github.com/zalando/skipper,An attacker can access the internal metadata server or other unauthenticated URLs by adding a specific header (X-Skipper-Proxy) to the http request.,0001-01-01T00:00:00Z,0001-01-01T00:00:00Z,github.com/zalando/skipper,Go,,,
GO-2022-1118,Improper validation of UUIDs in github.com/codenotary/immudb,"A malicious server can trick a client into treating it as a different server by changing the reported UUID.

immudb client SDKs use the server's UUID to distinguish between different server instance so that the client can connect to different immudb instances and keep the state for multiple servers. The SDK does not validate this UUID and accepts any value reported by the server. A malicious server can therefore change the reported UUID and trick the client into treating it as a different server.",0001-01-01T00:00:00Z,0001-01-01T00:00:00Z,github.com/codenotary/immudb,Go,,,
GO-2021-0243,Panic on certain certificates in crypto/tls,crypto/tls clients can panic when provided a certificate of the wrong type for the negotiated parameters. net/http clients performing HTTPS requests are also affected.,0001-01-01T00:00:00Z,2022-02-17T17:32:57Z,stdlib,Go,,,
GO-2023-1558,Denial of service via malformed size parameters in github.com/ipfs/go-bitfield,"When feeding untrusted user input into the size parameter of `NewBitfield` and FromBytes functions, an attacker can trigger panics.

This happens when the size is a not a multiple of 8 or is negative.

A workaround is to ensure size%8 == 0 && size >= 0 yourself before calling NewBitfield or FromBytes.",0001-01-01T00:00:00Z,0001-01-01T00:00:00Z,github.com/ipfs/go-bitfield,Go,,,
GO-2022-0462,Improper validation of client certificates in github.com/pion/dtls/v2,"Client-provided certificates are not correctly validated, and must not be trusted.

DTLS client certificates must be accompanied by proof that the client possesses the private key for the certificate. The Pion DTLS server accepted client certificates unaccompanied by this proof, permitting an attacker to present any certificate and have it accepted as valid.",0001-01-01T00:00:00Z,2022-07-01T20:07:12Z,github.com/pion/dtls/v2,Go,,,
GO-2022-0384,Repository credentials passed to alternate domain in helm.sh/helm/v3,"The username and password credentials associated with a Helm repository can be passed to another domain referenced by that Helm repository.

If the index.yaml for a Helm repository is hosted on one domain and references a chart archive on a different domain, Helm will provide the credentials for the index.yaml's domain when fetching those archives.",0001-01-01T00:00:00Z,2022-07-15T23:29:45Z,helm.sh/helm/v3,Go,,,
GO-2022-0519,Improper validation of access tokens in github.com/flyteorg/flyteadmin,Improper validation of access tokens can permit use of expired tokens.,0001-01-01T00:00:00Z,2022-07-30T03:51:07Z,github.com/flyteorg/flyteadmin,Go,,,
GO-2020-0032,Path traversal in github.com/goadesign/goa,"Due to improper sanitization of user input, Controller.FileHandler allows for directory traversal, allowing an attacker to read files outside of the target directory that the server has permission to read.",0001-01-01T00:00:00Z,2021-04-14T20:04:52Z,github.com/goadesign/goa,Go,,,
GO-2022-1187,Open redirect vulnerability in github.com/go-macaron/i18n,A user controlled string could lead to open redirect.,0001-01-01T00:00:00Z,0001-01-01T00:00:00Z,github.com/go-macaron/i18n,Go,,,
GO-2022-0391,Exposure of unencrypted plaintext hash in github.com/aws/aws-sdk-go,"The AWS S3 Crypto SDK sends an unencrypted hash of the plaintext alongside the ciphertext as a metadata field. This hash can be used to brute force the plaintext, if the hash is readable to the attacker.

AWS now blocks this metadata field, but older SDK versions still send it.",0001-01-01T00:00:00Z,2022-07-01T20:10:56Z,github.com/aws/aws-sdk-go,Go,,,
GO-2022-0493,Incorrect privilege reporting in syscall and golang.org/x/sys/unix,"When called with a non-zero flags parameter, the Faccessat function can incorrectly report that a file is accessible.",0001-01-01T00:00:00Z,2022-07-15T23:30:12Z,stdlib,Go,,,
GO-2023-2115,CSRF token reuse vulnerability in github.com/gofiber/fiber/v2,"A cross-site request forgery vulnerability in this package can allow an attacker to inject arbitrary values and forge malicious requests on behalf of a user. The attacker may inject arbitrary values without any authentication, or perform various malicious actions on behalf of an authenticated user, potentially compromising the security and integrity of the application.

The vulnerability is caused by improper validation and enforcement of CSRF tokens within the application. For 'safe' methods, the token is extracted from the cookie and saved to storage without further validation or sanitization. In addition, the CSRF token is validated against tokens in storage but not associated with a session, nor by using a Double Submit Cookie Method, allowing for token reuse.",0001-01-01T00:00:00Z,0001-01-01T00:00:00Z,github.com/gofiber/fiber/v2,Go,,,
GO-2023-2041,Improper handling of HTML-like comments in script contexts in html/template,"The html/template package does not properly handle HTML-like """" comment tokens, nor hashbang ""#!"" comment tokens, in <script> contexts. This may cause the template parser to improperly interpret the contents of <script> contexts, causing actions to be improperly escaped. This may be leveraged to perform an XSS attack.",0001-01-01T00:00:00Z,0001-01-01T00:00:00Z,stdlib,Go,,,
GO-2023-1840,Unsafe behavior in setuid/setgid binaries in runtime,"On Unix platforms, the Go runtime does not behave differently when a binary is run with the setuid/setgid bits. This can be dangerous in certain cases, such as when dumping memory state, or assuming the status of standard i/o file descriptors.

If a setuid/setgid binary is executed with standard I/O file descriptors closed, opening any files can result in unexpected content being read or written with elevated privileges. Similarly, if a setuid/setgid program is terminated, either via panic or signal, it may leak the contents of its registers.",0001-01-01T00:00:00Z,0001-01-01T00:00:00Z,stdlib,Go,,,
GO-2021-0113,Out-of-bounds read in golang.org/x/text/language,"Due to improper index calculation, an incorrectly formatted language tag can cause Parse to panic via an out of bounds read. If Parse is used to process untrusted user inputs, this may be used as a vector for a denial of service attack.",0001-01-01T00:00:00Z,2021-10-06T17:51:21Z,golang.org/x/text,Go,,,
GO-2022-0629,Directory traversal in sigs.k8s.io/secrets-store-csi-driver,"Modifying pod status allows host directory traversal.

Kubernetes Secrets Store CSI Driver allows an attacker who can modify a SecretProviderClassPodStatus/Status resource the ability to write content to the host filesystem and sync file contents to Kubernetes Secrets. This includes paths under var/lib/kubelet/pods that contain other Kubernetes Secrets.",0001-01-01T00:00:00Z,2022-02-15T01:57:18Z,sigs.k8s.io/secrets-store-csi-driver,Go,,,
GO-2020-0010,Elliptic curve key disclosure in github.com/square/go-jose,When using ECDH-ES an attacker can mount an invalid curve attack during decryption as the supplied public key is not checked to be on the same curve as the receivers private key.,0001-01-01T00:00:00Z,2021-04-14T20:04:52Z,github.com/square/go-jose,Go,,,
GO-2022-0230,Improper limitation of path name in github.com/containernetworking/cni,"The FindInPath function is vulnerable to directory traversal attacks, potentially permitting attackers to execute arbitrary binaries.

This function does not sanitize its plugin parameter, so parameter names containing ""../"" or other such elements may reference arbitrary locations on the filesystem.",0001-01-01T00:00:00Z,2022-07-01T20:17:57Z,github.com/containernetworking/cni,Go,,,
GO-2023-1703,Backticks not treated as string delimiters in html/template,"Templates do not properly consider backticks (`) as Javascript string delimiters, and do not escape them as expected.

Backticks are used, since ES6, for JS template literals. If a template contains a Go template action within a Javascript template literal, the contents of the action can be used to terminate the literal, injecting arbitrary Javascript code into the Go template.

As ES6 template literals are rather complex, and themselves can do string interpolation, the decision was made to simply disallow Go template actions from being used inside of them (e.g. ""var a = {{.}}""), since there is no obviously safe way to allow this behavior. This takes the same approach as github.com/google/safehtml.

With fix, Template.Parse returns an Error when it encounters templates like this, with an ErrorCode of value 12. This ErrorCode is currently unexported, but will be exported in the release of Go 1.21.

Users who rely on the previous behavior can re-enable it using the GODEBUG flag jstmpllitinterp=1, with the caveat that backticks will now be escaped. This should be used with caution.",0001-01-01T00:00:00Z,0001-01-01T00:00:00Z,stdlib,Go,,,
GO-2022-0564,Signature forgery in github.com/biscuit-auth/biscuit-go,"An attacker can forge Biscuit v1 tokens with any access level.

There is no known workaround for Biscuit v1. The Biscuit v2 specification avoids this vulnerability.",0001-01-01T00:00:00Z,2022-08-15T18:02:15Z,github.com/biscuit-auth/biscuit-go,Go,,,
GO-2021-0224,Data race and crash in net/http,HTTP servers where the Handler concurrently reads the request body and writes a response can encounter a data race and crash. The httputil.ReverseProxy Handler is affected.,0001-01-01T00:00:00Z,2022-02-17T17:36:04Z,stdlib,Go,,,
GO-2021-0088,Denial of service in github.com/facebook/fbthrift,"Skip ignores unknown fields, rather than failing. A malicious user can craft small messages with unknown fields which can take significant resources to parse. If a server accepts messages from an untrusted user, it may be used as a denial of service vector.",0001-01-01T00:00:00Z,2021-04-14T20:04:52Z,github.com/facebook/fbthrift,Go,,,
GO-2022-1148,Resource exhaustion in github.com/libp2p/go-libp2p,"go-libp2p is vulnerable to targeted resource exhaustion attacks.

These attacks target libp2p's connection, stream, peer, and memory management. An attacker can cause the allocation of large amounts of memory ultimately leading to the process getting killed by the host's operating system.

While a connection manager tasked with keeping the number of connections within manageable limits has been part of go-libp2p, this component was designed to handle the regular churn of peers, not a targeted resource exhaustion attack.

It's recommend to update to v0.21.0 onwards to get some useful functionality that will help in production environments like better metrics around resource usage, Grafana dashboards around resource usage, allow list support, and default autoscaling limits.",0001-01-01T00:00:00Z,0001-01-01T00:00:00Z,github.com/libp2p/go-libp2p,Go,,,
GO-2020-0024,Infinite loop in github.com/btcsuite/go-socks,"The RemoteAddr and LocalAddr methods on the returned net.Conn may call themselves, leading to an infinite loop which will crash the program due to a stack overflow.",0001-01-01T00:00:00Z,2021-04-14T20:04:52Z,github.com/btcsuite/go-socks,Go,,,
GO-2023-2000,Large RSA keys can cause high resource usage in core/crypto package,"Large RSA keys can lead to resource exhaustion attacks.

With fix, the size of RSA keys transmitted during handshakes is restricted to <= 8192 bits.",0001-01-01T00:00:00Z,0001-01-01T00:00:00Z,github.com/libp2p/go-libp2p,Go,,,
GO-2021-0241,Attacker can drop certain headers in net/http/httputil,"ReverseProxy can be made to forward certain hop-by-hop headers, including Connection. If the target of the ReverseProxy is itself a reverse proxy, this lets an attacker drop arbitrary headers, including those set by the ReverseProxy.Director.",0001-01-01T00:00:00Z,2022-02-17T17:33:16Z,stdlib,Go,,,
GO-2023-1883,Denial of service via OOM in github.com/cometbft/cometbft,"A bug in the CometBFT middleware causes the mempool's two data structures to fall out of sync. This can lead to duplicate transactions that cannot be removed, even after they are committed in a block. The only way to remove the transaction is to restart the node. This can be exploited by an attacker to bring down a node by repeatedly submitting duplicate transactions.",0001-01-01T00:00:00Z,0001-01-01T00:00:00Z,github.com/cometbft/cometbft,Go,,,
GO-2022-1213,Insecure generation of cookies in github.com/go-macaron/csrf,"The Options.Secure value is ignored, and cookies created by Generate never have the secure attribute.",0001-01-01T00:00:00Z,0001-01-01T00:00:00Z,github.com/go-macaron/csrf,Go,,,
GO-2023-1732,Timing attack from non-constant time scalar multiplication in github.com/bnb-chain/tss-lib,Timing attack from non-constant time scalar multiplication in github.com/bnb-chain/tss-lib.,0001-01-01T00:00:00Z,0001-01-01T00:00:00Z,github.com/bnb-chain/tss-lib,Go,,,
GO-2022-0755,Cross-site request forgery in github.com/rancher/rancher,Rancher 2 is vulnerable to a Cross-Site Websocket Hijacking attack that allows an exploiter to gain access to clusters managed by Rancher.,0001-01-01T00:00:00Z,2021-05-18T15:42:40Z,github.com/rancher/rancher,Go,,,
GO-2022-0203,"Remote command execution via ""go get"" command with ""-insecure"" option in cmd/go","The ""go get"" command is vulnerable to remote code execution.

When the -insecure command-line option is used, ""go get"" does not validate the import path (get/vcs.go only checks for ""://"" anywhere in the string), which allows remote attackers to execute arbitrary OS commands via a crafted web site.",0001-01-01T00:00:00Z,2022-08-09T23:19:00Z,toolchain,Go,,,
GO-2021-0054,Panic due to improper input validation in github.com/tidwall/gjson,"Due to improper bounds checking, maliciously crafted JSON objects can cause an out-of-bounds panic. If parsing user input, this may be used as a denial of service vector.",0001-01-01T00:00:00Z,2021-04-14T20:04:52Z,github.com/tidwall/gjson,Go,,,
GO-2023-2137,Credentials leak in github.com/ydb-platform/ydb-go-sdk/v3,"A custom credentials object that does not implement the fmt.Stringer interface may leak sensitive information (e.g., credentials) via logs.",0001-01-01T00:00:00Z,0001-01-01T00:00:00Z,github.com/ydb-platform/ydb-go-sdk/v3,Go,,,
GO-2022-0256,Panic via maliciously crafted message in github.com/ethereum/go-ethereum,A maliciously crafted snap/1 protocol message can cause a panic.,0001-01-01T00:00:00Z,2022-07-15T23:08:03Z,github.com/ethereum/go-ethereum,Go,,,
GO-2023-1753,Improper handling of empty HTML attributes in html/template,"Templates containing actions in unquoted HTML attributes (e.g. ""attr={{.}}"") executed with empty input can result in output with unexpected results when parsed due to HTML normalization rules. This may allow injection of arbitrary attributes into tags.",0001-01-01T00:00:00Z,0001-01-01T00:00:00Z,stdlib,Go,,,
GO-2023-1495,Request smuggling due to improper request handling in golang.org/x/net/http2/h2c,"A request smuggling attack is possible when using MaxBytesHandler.

When using MaxBytesHandler, the body of an HTTP request is not fully consumed. When the server attempts to read HTTP2 frames from the connection, it will instead be reading the body of the HTTP request, which could be attacker-manipulated to represent arbitrary HTTP2 requests.",0001-01-01T00:00:00Z,0001-01-01T00:00:00Z,golang.org/x/net,Go,,,
GO-2022-0201,"Remote command execution via ""go get"" command with cgo in cmd/go","The ""go get"" command with cgo is vulnerable to remote command execution by leveraging the gcc or clang plugin feature.

When cgo is enabled, the build step during ""go get"" invokes the host C compiler, gcc or clang, adding compiler flags specified in the Go source files. Both gcc and clang support a plugin mechanism in which a shared-library plugin is loaded into the compiler, as directed by compiler flags. This means that a Go package repository can contain an attack.so file along with a Go source file that says (for example) ""// #cgo CFLAGS: -fplugin=attack.so"" causing the attack plugin to be loaded into the host C compiler during the build. Gcc and clang plugins are completely unrestricted in their access to the host system.",0001-01-01T00:00:00Z,2022-08-09T18:15:41Z,toolchain,Go,,,
GO-2023-1857,Panic when parsing ranges with invalid masks in github.com/malfunkt/iprange,Parsing a range with a mask larger than 32 bits causes a panic.,0001-01-01T00:00:00Z,0001-01-01T00:00:00Z,github.com/malfunkt/iprange,Go,,,
GO-2023-1709,Cache-timing attacks in Shamir's secret sharing in github.com/hashicorp/vault,"HashiCorp Vault's implementation of Shamir's secret sharing uses precomputed table lookups, and is vulnerable to cache-timing attacks.

An attacker with access to, and the ability to observe a large number of unseal operations on the host through a side channel may reduce the search space of a brute force effort to recover the Shamir shares.",0001-01-01T00:00:00Z,0001-01-01T00:00:00Z,github.com/hashicorp/vault,Go,,,
GO-2021-0073,Arbitrary command execution in github.com/git-lfs/git-lfs,Arbitrary command execution can be triggered by improperly sanitized SSH URLs in LFS configuration files. This can be triggered by cloning a malicious repository.,0001-01-01T00:00:00Z,2021-04-14T20:04:52Z,github.com/git-lfs/git-lfs,Go,,,
GO-2021-0239,Improper sanitization when resolving values from DNS in net,"The LookupCNAME, LookupSRV, LookupMX, LookupNS, and LookupAddr functions and their respective methods on the Resolver type may return arbitrary values retrieved from DNS which do not follow the established RFC 1035 rules for domain names. If these names are used without further sanitization, for instance unsafely included in HTML, they may allow for injection of unexpected content. Note that LookupTXT may still return arbitrary values that could require sanitization before further use.",0001-01-01T00:00:00Z,2022-02-17T17:33:35Z,stdlib,Go,,,
GO-2021-0084,Incorrect permissions for critical resource in github.com/astaxie/beego,"Session data is stored using permissive permissions, allowing local users with filesystem access to read arbitrary data.",0001-01-01T00:00:00Z,2021-04-14T20:04:52Z,github.com/astaxie/beego,Go,,,
GO-2021-0258,Incorrect authorization in github.com/pomerium/pomerium,"Pomerium is an open source identity-aware access proxy. Changes to the OIDC claims of a user after initial login are not reflected in policy evaluation when using allowed_idp_claims as part of policy. If using allowed_idp_claims and a user's claims are changed, Pomerium can make incorrect authorization decisions.

For users unable to upgrade clear data on databroker service by clearing redis or restarting the in-memory databroker to force claims to be updated.",0001-01-01T00:00:00Z,2022-01-14T17:30:31Z,github.com/pomerium/pomerium,Go,,,
GO-2021-0081,Insufficiently Protected Credentials in github.com/containers/image,"The HTTP client used to connect to the container registry authorization service explicitly disables TLS verification, allowing an attacker that is able to MITM the connection to steal credentials.",0001-01-01T00:00:00Z,2021-04-14T20:04:52Z,github.com/containers/image,Go,,,
GO-2023-1549,Improper input validation in github.com/openshift/apiserver-library-go,"Low-privileged users can set the seccomp profile for pods they control to ""unconfined.""

By default, the seccomp profile used in the restricted-v2 Security Context Constraint (SCC) is ""runtime/default,"" allowing users to disable seccomp for pods they can create and modify.",0001-01-01T00:00:00Z,0001-01-01T00:00:00Z,github.com/openshift/apiserver-library-go,Go,,,
GO-2021-0104,Authorization bypass in github.com/pion/webrtc/v3,"Due to improper error handling, DTLS connections were not killed when certificate verification failed, causing users who did not check the connection state to continue to use the connection. This could allow allow an attacker which holds the ICE password, but not a valid certificate, to bypass this restriction.",0001-01-01T00:00:00Z,2021-07-28T18:08:05Z,github.com/pion/webrtc/v3,Go,,,
GO-2022-0229,Panic in certificate parsing in crypto/x509 and golang.org/x/crypto/cryptobyte,"On 32-bit architectures, a malformed input to crypto/x509 or the ASN.1 parsing functions of golang.org/x/crypto/cryptobyte can lead to a panic.

The malformed certificate can be delivered via a crypto/tls connection to a client, or to a server that accepts client certificates. net/http clients can be made to crash by an HTTPS server, while net/http servers that accept client certificates will recover the panic and are unaffected.",0001-01-01T00:00:00Z,2022-07-06T18:23:48Z,stdlib,Go,,,
GO-2022-1167,Denial of service in string value parsing in helm.sh/helm/v3,"Applications that use the strvals package in the Helm SDK to parse user supplied input can suffer a Denial of Service when that input causes an error that cannot be recovered from.

The strvals package contains a parser that turns strings into Go structures. For example, the Helm client has command line flags like --set, --set-string, and others that enable the user to pass in strings that are merged into the values. The strvals package converts these strings into structures Go can work with. Some string inputs can cause can cause a stack overflow to be created causing a stack overflow error. Stack overflow errors cannot be recovered from.

The Helm Client will panic with input to --set, --set-string, and other value setting flags that causes a stack overflow. Helm is not a long running service so the error will not affect future uses of the Helm client.",0001-01-01T00:00:00Z,2022-12-14T18:06:02Z,helm.sh/helm/v3,Go,,,
GO-2022-0558,Privilege escalation in github.com/containers/psgo,"The psgo package executes the 'nsenter' binary, potentially allowing privilege escalation when used in environments where nsenter is provided by an untrusted source.",0001-01-01T00:00:00Z,2022-08-22T18:07:59Z,github.com/containers/psgo,Go,,,
GO-2021-0083,Improper certificate validation in github.com/hybridgroup/gobot,"TLS certificate verification is skipped when connecting to a MQTT server. This allows an attacker who can MITM the connection to read, or forge, messages passed between the client and server.",0001-01-01T00:00:00Z,2021-04-14T20:04:52Z,github.com/hybridgroup/gobot,Go,,,
GO-2023-1568,Path traversal on Windows in path/filepath,"A path traversal vulnerability exists in filepath.Clean on Windows.

On Windows, the filepath.Clean function could transform an invalid path such as ""a/../c:/b"" into the valid path ""c:\b"". This transformation of a relative (if invalid) path into an absolute path could enable a directory traversal attack.

After fix, the filepath.Clean function transforms this path into the relative (but still invalid) path "".\c:\b"".",0001-01-01T00:00:00Z,0001-01-01T00:00:00Z,stdlib,Go,,,
GO-2022-0952,Incorrect event parsing in github.com/matrix-org/gomatrixserverlib,"Power level parsing does not parse the ""events_default"" key of the m.room.power_levels event, setting the event default power level to zero in all cases. This can cause events to be improperly accepted or rejected in rooms where the event_default power level has been changed.",0001-01-01T00:00:00Z,2022-08-22T18:08:50Z,github.com/matrix-org/gomatrixserverlib,Go,,,
GO-2020-0013,Man-in-the-middle attack in golang.org/x/crypto/ssh,By default host key verification is disabled which allows for man-in-the-middle attacks against SSH clients if ClientConfig.HostKeyCallback is not set.,0001-01-01T00:00:00Z,2021-04-14T20:04:52Z,golang.org/x/crypto,Go,,,
GO-2023-1788,Incorrect permissions in github.com/goreleaser/nfpm/v2,"When nfpm packages files without additional configuration to enforce its own permissions, the files could be packaged with incorrect permissions (chmod 666 or 777). Anyone who uses nfpm to create packages and does not check or set file permissions before packaging could result in files or folders being packaged with incorrect permissions.",0001-01-01T00:00:00Z,0001-01-01T00:00:00Z,github.com/goreleaser/nfpm/v2,Go,,,
GO-2021-0412,Incorrect authorization in github.com/containerd/imgcrypt,"The imgcrypt library provides API extensions for containerd to support encrypted container images and implements the ctd-decoder command line tool for use by containerd to decrypt encrypted container images. The imgcrypt function `CheckAuthorization` is supposed to check whether the current used is authorized to access an encrypted image and prevent the user from running an image that another user previously decrypted on the same system. In versions prior to 1.1.4, a failure occurs when an image with a ManifestList is used and the architecture of the local host is not the first one in the ManifestList. Only the first architecture in the list was tested, which may not have its layers available locally since it could not be run on the host architecture. Therefore, the verdict on unavailable layers was that the image could be run anticipating that image run failure would occur later due to the layers not being available. However, this verdict to allow the image to run enabled other architectures in the ManifestList to run an image without providing keys if that image had previously been decrypted. A patch has been applied to imgcrypt 1.1.4. Workarounds may include usage of different namespaces for each remote user.",0001-01-01T00:00:00Z,2022-04-28T23:35:11Z,github.com/containerd/imgcrypt,Go,,,
GO-2022-0522,Stack exhaustion on crafted paths in path/filepath,Calling Glob on a path which contains a large number of path separators can cause a panic due to stack exhaustion.,0001-01-01T00:00:00Z,2022-07-20T17:02:29Z,stdlib,Go,,,
GO-2023-1752,Improper handling of JavaScript whitespace in html/template,"Not all valid JavaScript whitespace characters are considered to be whitespace. Templates containing whitespace characters outside of the character set ""\t\n\f\r\u0020\u2028\u2029"" in JavaScript contexts that also contain actions may not be properly sanitized during execution.",0001-01-01T00:00:00Z,0001-01-01T00:00:00Z,stdlib,Go,,,
GO-2020-0043,Authentication bypass in github.com/mholt/caddy,"Due to improper TLS verification when serving traffic for multiple SNIs, an attacker may bypass TLS client authentication by indicating an SNI during the TLS handshake that is different from the name in the HTTP Host header.",0001-01-01T00:00:00Z,2021-04-14T20:04:52Z,github.com/mholt/caddy,Go,,,
GO-2021-0265,Denial of service in github.com/tidwall/gjson,A maliciously crafted path can cause Get and other query functions to consume excessive amounts of CPU and time.,0001-01-01T00:00:00Z,2022-08-15T18:06:07Z,github.com/tidwall/gjson,Go,,,
GO-2021-0071,Race condition in github.com/lxc/lxd,"A race between chown and chmod operations during a container filesystem shift may allow a user who can modify the filesystem to chmod an arbitrary path of their choice, rather than the expected path.",0001-01-01T00:00:00Z,2021-04-14T20:04:52Z,github.com/lxc/lxd,Go,,,
GO-2022-1178,JWT leak in github.com/bradleyfalzon/ghinstallation,"Errors returned by ghinstallation.Transport can include the JWT used for the failed operation. If the error is exposed to an untrusted party, this JWT could be extracted and used to authenticate further requests.",0001-01-01T00:00:00Z,0001-01-01T00:00:00Z,github.com/bradleyfalzon/ghinstallation,Go,,,
GO-2023-1589,Denial of service from memory exhaustion in github.com/notaryproject/notation-go,"Parsing PKIX distinguished names containing the string ""=#"" can cause excessive memory consumption.",0001-01-01T00:00:00Z,0001-01-01T00:00:00Z,github.com/notaryproject/notation-go,Go,,,
GO-2021-0264,Panic when opening certain archives in archive/zip,"Previously, opening a zip with (*Reader).Open could result in a panic if the zip contained a file whose name was exclusively made up of slash characters or "".."" path elements.

Open could also panic if passed the empty string directly as an argument.

Now, any files in the zip whose name could not be made valid for fs.FS.Open will be skipped, and no longer added to the fs.FS file list, although they are still accessible through (*Reader).File.

Note that it was already the case that a file could be accessible from (*Reader).Open with a name different from the one in (*Reader).File, as the former is the cleaned name, while the latter is the original one.

Finally, the actual panic site was made robust as a defense-in-depth measure.",0001-01-01T00:00:00Z,2022-01-13T20:54:43Z,stdlib,Go,,,
GO-2021-0078,Panic when parsing malformed HTML in golang.org/x/net/html,"The HTML parser does not properly handle ""in frameset"" insertion mode, and can be made to panic when operating on malformed HTML that contains <template> tags. If operating on user input, this may be a vector for a denial of service attack.",0001-01-01T00:00:00Z,2021-04-14T20:04:52Z,golang.org/x/net,Go,,,
GO-2022-0619,"Authorization bypass in github.com/emicklei/go-restful, go-restful/v2 and go-restful/v3","CORS filters that use an AllowedDomains configuration parameter can match domains outside the specified set, permitting an attacker to avoid the CORS policy.

The AllowedDomains configuration parameter is documented as a list of allowed origin domains, but values in this list are applied as regular expression matches. For example, an allowed domain of ""example.com"" will match the Origin header ""example.com.malicious.domain"".",0001-01-01T00:00:00Z,2022-08-15T18:05:29Z,github.com/emicklei/go-restful,Go,,,
GO-2022-0211,Incorrect parsing validation in net/url,"The url.Parse function accepts URLs with malformed hosts, such that the Host field can have arbitrary suffixes that appear in neither Hostname() nor Port(), allowing authorization bypasses in certain applications.",0001-01-01T00:00:00Z,2022-07-01T20:15:30Z,stdlib,Go,,,
